---
# Config repository associated jobs
- job:
    name: 'config-check'
    builders:
      - shell: |
          set -e
          rm -Rf config build
          zuul-cloner http://gerrit/r config
          # Prepare a default configuration for zuul and nodepool
          mkdir -p build/nodepool build/zuul build/repoxplorer
          cp ~jenkins/defconf/zuul.conf build/zuul/zuul.conf
          cp ~jenkins/defconf/nodepool.yaml build/nodepool/_nodepool.yaml
          cp ~jenkins/defconf/repoxplorer.py build/repoxplorer/config.py
          # Prepare a fake jenkins-job config file to force offline jobs check
          echo -e "[jenkins]\nurl=http://localhost:99" > build/jenkins.ini

          cd config
          echo "[+] Checking jobs"
          jenkins-jobs --conf ../build/jenkins.ini test jobs/ > /dev/null

          echo "[+] Checking jobs-zuul"
          jenkins-jobs --conf ../build/jenkins.ini test jobs-zuul/ > /dev/null

          echo "[+] Checking zuul"
          /usr/share/sf-config/scripts/yaml-merger.py zuul | tee ../build/zuul/layout.yaml
          cp zuul/*.py ../build/zuul/ || true
          zuul-server -c ../build/zuul/zuul.conf -l ../build/zuul/layout.yaml -t

          echo "[+] Checking nodepool [v2]"
          /usr/share/sf-config/scripts/sf-nodepool-conf-merger.py nodepool/nodepool.yaml ../build/nodepool/nodepool.yaml v2
          nodepool -c ../build/nodepool/nodepool.yaml config-validate

          if [ -f /usr/bin/nodepool3 ]; then
              echo "[+] Checking nodepool [v3]"
              echo -e "---\n{}" > ../build/nodepool/_nodepool.yaml
              /usr/share/sf-config/scripts/sf-nodepool-conf-merger.py nodepoolV3/nodepool.yaml ../build/nodepool/nodepool.yaml v3
              nodepool3 -c ../build/nodepool/nodepool.yaml config-validate
          fi

          echo "[+] Checking gerrit replication"
          git config -f gerrit/replication.config -l > /dev/null

          echo "[+] Checking gerrit commentlinks"
          python -c "import yaml; 'commentlinks' in yaml.safe_load(open('gerrit/commentlinks.yaml'))"

          echo "[+] Check dashboards"
          sf-update-dashboard --check --input dashboards/

          echo "[+] Checking syntax errors in policy file"
          python -c "import yaml; yaml.safe_load(open('policies/policy.yaml'))"

          if [ -f /usr/bin/repoxplorer-config-validate ]; then
              echo "[+] Checking syntax errors in repoxplorer definition files"
              repoxplorer-config-validate --config ../build/repoxplorer/config.py
          fi

          echo "[+] Checking resources changes"
          # Managesf validate can now use directly the local clone
          unset ZUUL_REF
          unset ZUUL_URL
          /usr/local/bin/resources.sh validate
    publishers:
      - console-log
    node: master

- job:
    name: 'config-update'
    builders:
      - shell: |
          set -e
          echo "[+] Updating configuration using $ZUUL_COMMIT"
          ssh root@install-server sf_configrepo_update $ZUUL_COMMIT
    publishers:
      - console-log
      - email-admin
    node: master

- job:
    name: 'config-distgit-mirror-github'
    builders:
      - rdo-prepare-workspace-post
      - shell: |
          set -e
          cd $ZUUL_PROJECT
          # Clone the gating_scripts repo, we will need it
          git clone https://review.rdoproject.org/r/rdo_gating_scripts
          pushd rdo_gating_scripts/rdo-create-project
          virtualenv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          pip install ruamel.yaml
          pip install --upgrade urllib3
          popd
          # Set up git configuration
          git config user.name "rdo-trunk"
          git config user.email "javier.pena@redhat.com"
          git diff --name-only --diff-filter=A HEAD~1 | while read line; do
            # Find new files in the resources directory
            if [[ "$line" =~ resources.* ]]; then
              echo "Parsing new projects in $line"
              python /opt/nodepool-scripts/find-new-distgit-projects.py $line | while read project; do
                  # Remove the initial openstack/ or puppet/ part
                  project_short=$(echo $project | awk -F/ '{print $2}')
                  echo "Creating GitHub project for $project_short"
                  rdo_gating_scripts/rdo-create-project/rdo-create-project-github.py --token $GITHUB_API_KEY --org rdo-packages --skip-deploy-key create --name $project_short
              done
            fi
          done
    node: rdo-centos-7
    publishers:
      - console-log
    wrappers:
      - timestamps
      - credentials-binding:
        - text:
           credential-id: bf68705f-a35a-4612-9a5f-edbb6f0a3673
           variable: GITHUB_API_KEY
