- builder:
    name: weirdo-prepare
    builders:
      - shell: |
          CLONEMAP=$(mktemp)
          function cleanup {
              rm -f $CLONEMAP
          }
          trap cleanup EXIT
          cat > $CLONEMAP << EOF
          clonemap:
            - name: 'rdo-infra/weirdo'
              dest: 'weirdo'
            - name: 'rdo-infra/ansible-role-weirdo-(.*)'
              dest: 'weirdo/playbooks/roles/\1'
          EOF

          # Zuul clone WeIRDO and it's roles at their expected location
          zuul-cloner -m $CLONEMAP \
            https://review.rdoproject.org/r \
            rdo-infra/weirdo \
            rdo-infra/ansible-role-weirdo-common \
            rdo-infra/ansible-role-weirdo-packstack \
            rdo-infra/ansible-role-weirdo-puppet-openstack

- builder:
    name: weirdo-configure-gate-dlrn-repo
    builders:
      - shell: |
        # If this is a child job of a DLRN-rpmbuild job, we want to use the
        # uploaded repository artifact to test that particular package that
        # was just built.
        # Re-construct the expected repository URL
        ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)
        LOG_PATH="${BASE_LOG_PATH}/${ZUUL_PIPELINE}/DLRN-rpmbuild/${ZUUL_REF}"
        artifacts="${SWIFT_artifacts_LOGSERVER_PREFIX}/${LOG_PATH}/artifacts"

        # If there's no repository to configure, stop here
        curl -o /dev/null -sIf "${artifacts}" || exit 0

        # Find the repository hash
        hash=$(curl -s "${artifacts}/centos/repos/report.html" |grep repo |sed 's/.*"\([^"]*\)".*/\1/')
        repository="${artifacts}/centos/repos/${hash}"

        # Configure the repository
        sudo bash -c "cat << EOF > /etc/yum.repos.d/${ZUUL_REF}.repo
        [delorean]
        name=delorean-zuul-${ZUUL_REF}
        baseurl=${repository}
        enabled=1
        gpgcheck=0
        priority=1
        "

- builder:
    name: weirdo-ansible-playbook
    builders:
        - shell: |
            # WeIRDO uses ARA for ansible-playbook run visualization
            export ARA_DATABASE="sqlite:///$WORKSPACE/ara-$JOB_NAME.sqlite"

            # Backwards compat for project and openstack_release
            # (dmsimard) TODO: Clean this up ASAP
            if [[ "{project}" == "puppet" ]]; then
                project="puppet-openstack"
            else
                project="{project}"
            fi

            if [[ "{openstack_release}" != "master" ]]; then
                version="stable/{openstack_release}"
            else
                version="{openstack_release}"
            fi

            cd weirdo
            # Prepare Ansible inventory to use localhost
            cat <<EOF >hosts
            localhost ansible_connection=local
            [openstack_nodes]
            localhost log_destination=/var/log/weirdo
            EOF

            tox -e ansible-playbook -- -vv -b -i hosts playbooks/$project-{scenario}.yml -e openstack_release={openstack_release} -e version=$version

- builder:
    name: weirdo-collect-logs
    builders:
      - shell: |
            # WeIRDO uses ARA for ansible-playbook run visualization
            export ARA_DATABASE="sqlite:///$WORKSPACE/ara-$JOB_NAME.sqlite"

            # Generate ARA playbook analysis
            sudo -E weirdo/.tox/ansible-playbook/bin/ara generate /var/log/weirdo/ara

            mkdir artifacts
            sudo cp -a /var/log/weirdo/* artifacts/
            # Ensure permissions allow artifact uploading
            sudo chown -R "$(id -u).$(id -g)" artifacts

- publisher:
    name: weirdo-publish-logs
    publishers:
      - postbuildscript:
          builders:
            - weirdo-collect-logs
            - zuul-swift-upload
          script-only-if-succeeded: False
          script-only-if-failed: False

- job:
    name: gate-weirdo-ansible-lint
    defaults: global
    builders:
      - prepare-workspace
      - weirdo-prepare
      - shell: |
          set +e
          cd weirdo
          tox -e ansible-lint
    triggers:
      - zuul
    node: bare-centos-7

- job:
    name: gate-weirdo-docs
    defaults: global
    builders:
      - prepare-workspace
      - weirdo-prepare
      - shell: |
          set +e
          cd weirdo
          tox -e docs
    triggers:
      - zuul
    node: bare-centos-7

- job-template:
    name: 'gate-weirdo-integration-{openstack_release}-{project}-{scenario}'
    defaults: global
    builders:
        - prepare-workspace
        - weirdo-prepare
        - weirdo-configure-gate-dlrn-repo
        - weirdo-ansible-playbook:
            openstack_release: '{openstack_release}'
            project: '{project}'
            scenario: '{scenario}'
    publishers:
        - weirdo-publish-logs
    triggers:
        - zuul
    node: rdo-weirdo-centos-7

- project:
    name: gate-weirdo-packstack
    project: packstack
    openstack_release:
      - master
      - mitaka
    scenario:
      - scenario001
      # - scenario002
      # - scenario003
    jobs:
      - 'gate-weirdo-integration-{openstack_release}-{project}-{scenario}'

- project:
    name: gate-weirdo-puppet
    project: puppet
    openstack_release:
      - master
      - mitaka
    scenario:
      - scenario001
      # - scenario002
      # - scenario003
    jobs:
      - 'gate-weirdo-integration-{openstack_release}-{project}-{scenario}'
