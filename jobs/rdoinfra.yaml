- job:
    name: 'tox-jjb'
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - shell: |
          set +e -o pipefail
          cd $ZUUL_PROJECT
          # Copy file containing token for weirdo into the jobs folder
          cp -f $WEIRDO_TOKEN_FILE ./jenkins/jobs/weirdo_token
          # lines containing authtoken must not be shown in output
          tox -e jjb |grep -v -i -e authtoken -e auth-token
    triggers:
      - zuul
    node: rdo-centos-7
    wrappers:
      - credentials-binding:
        - file:
           credential-id: 2b9107c5-c511-41e4-9012-a97af25bd295
           variable: WEIRDO_TOKEN_FILE

- job:
    name: 'publish-cico-jjb'
    defaults: rdo-global
    concurrent: false
    builders:
      - rdo-prepare-workspace
      - shell: |
          set +e -o pipefail
          cd $ZUUL_PROJECT
          # Copy file containing token for weirdo into the jobs folder
          cp -f $WEIRDO_TOKEN_FILE ./jenkins/jobs/weirdo_token
          # Ensure that there's no failure before pushing
          tox -e jjb |grep -v -i -e authtoken -e auth-token
          # Update jobs
          source .tox/jjb/bin/activate
          pushd jenkins
          jenkins-jobs --conf $JJB_CONFIG update jobs |grep -v -i -e authtoken -e auth-token
          popd
    triggers:
      - zuul
    node: rdo-centos-7
    wrappers:
      - credentials-binding:
        - file:
           credential-id: b578a3ee-cf49-4250-899a-0bc7f84363c2
           variable: JJB_CONFIG
        - file:
           credential-id: 2b9107c5-c511-41e4-9012-a97af25bd295
           variable: WEIRDO_TOKEN_FILE

- builder:
    name: checkout-rdo-kolla-build
    builders:
      - shell: |
          set -ex
          if [[ "${ZUUL_PROJECT}" != "rdo-infra/ansible-role-rdo-kolla-build" ]]; then
              mkdir -p $WORKSPACE/rdo-infra/ansible-role-rdo-kolla-build
              git clone https://github.com/rdo-infra/ansible-role-rdo-kolla-build rdo-infra/ansible-role-rdo-kolla-build
          fi

- builder:
    name: rdo-kolla-build-images
    builders:
      - shell: |
          set -ex
          mkdir -p $WORKSPACE/roles
          ln -s $WORKSPACE/rdo-infra/ansible-role-rdo-kolla-build $WORKSPACE/roles/kolla-build

          sudo yum -y install libselinux-python
          # Need to inherit system-site-packages for libselinux-python and python-yum
          virtualenv --system-site-packages $WORKSPACE/ansible
          source $WORKSPACE/ansible/bin/activate
          pip install ansible==2.5.2 ara

          export ara_location=$(python -c "import os,ara; print(os.path.dirname(ara.__file__))")
          export ANSIBLE_CALLBACK_PLUGINS=$ara_location/plugins/callbacks
          export ANSIBLE_ACTION_PLUGINS=$ara_location/plugins/actions
          export ANSIBLE_LIBRARY=$ara_location/plugins/modules
          export ANSIBLE_ROLES_PATH=$WORKSPACE/roles

          export ARA_DATABASE="sqlite:///$WORKSPACE/ara.sqlite"

          cat << EOF > ${WORKSPACE}/playbook.yml
          ---
          - name: Build Kolla images
            hosts: localhost
            become: yes
            become_user: root
            roles:
              - kolla-build
          EOF
          ansible-playbook -i localhost $WORKSPACE/playbook.yml --tags "setup,build"

- job:
    name: 'rdo-kolla-build-integration'
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - dlrn-gate-repository
      - checkout-rdo-kolla-build
      - rdo-kolla-build-images
    triggers:
      - zuul
    publishers:
      - postbuildscript:
          builders:
            - shell: |
                mkdir $WORKSPACE/logs
                cp -a /tmp/kolla $WORKSPACE/logs/
                export ARA_DATABASE="sqlite:///$WORKSPACE/ara.sqlite"
                sudo -E $WORKSPACE/ansible/bin/ara generate html $WORKSPACE/logs/ara

                # Ensure permissions allow artifact uploading
                sudo chown -R "$(id -u).$(id -g)" $WORKSPACE/logs
          script-only-if-succeeded: False
          script-only-if-failed: False
      - rdo-rsync-logs
    node: rdo-centos-7
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

- job:
    name: gate-rdo-kolla-build-containers
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - checkout-rdo-kolla-build
      - rdo-kolla-build-images
    triggers:
      - zuul
    publishers:
      - postbuildscript:
          builders:
            - shell: |
                mkdir $WORKSPACE/logs
                cp -a /tmp/kolla $WORKSPACE/logs/
                export ARA_DATABASE="sqlite:///$WORKSPACE/ara.sqlite"
                sudo -E $WORKSPACE/ansible/bin/ara generate html $WORKSPACE/logs/ara

                # Ensure permissions allow artifact uploading
                sudo chown -R "$(id -u).$(id -g)" $WORKSPACE/logs
          script-only-if-succeeded: False
          script-only-if-failed: False
      - rdo-rsync-logs
    node: rdo-centos-7
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

- builder:
    name: rdo-infra-playbooks-prepare
    builders:
      - shell: |
          CLONEMAP=$(mktemp)
          function cleanup {
              rm -f $CLONEMAP
          }
          trap cleanup EXIT
          cat > $CLONEMAP << EOF
          clonemap:
            - name: 'rdo-infra/rdo-infra-playbooks'
              dest: 'rdo-infra-playbooks'
            - name: 'rdo-infra/ansible-role-rdo-(.*)'
              dest: 'rdo-infra-playbooks/roles/rdo-infra/\1'
            - name: 'centos-opstools/opstools-ansible'
              dest: 'rdo-infra-playbooks/roles/opstools-ansible'
          EOF

          # Zuul clone rdo-infra-playbooks and it's roles at their expected location
          zuul-cloner -m $CLONEMAP \
            https://review.rdoproject.org/r \
            rdo-infra/rdo-infra-playbooks \
            rdo-infra/ansible-role-rdo-base \
            rdo-infra/ansible-role-rdo-bot \
            centos-opstools/opstools-ansible

- builder:
    name: rdo-infra-playbooks-integration
    builders:
      - shell: |
          set -e
          # Need to inherit system-site-packages for libselinux-python and python-yum
          virtualenv --system-site-packages $WORKSPACE/ansible
          source $WORKSPACE/ansible/bin/activate
          pip install ansible==2.4.2.0 ara

          export ara_location=$(python -c "import os,ara; print(os.path.dirname(ara.__file__))")
          export ANSIBLE_CALLBACK_PLUGINS=$ara_location/plugins/callbacks
          export ANSIBLE_ACTION_PLUGINS=$ara_location/plugins/actions
          export ANSIBLE_LIBRARY=$ara_location/plugins/modules
          # ANSIBLE_ASK_VAULT_PASS and ANSIBLE_VAULT_PASSWORD_FILE are mutually
          # exclusive. We default ANSIBLE_ASK_VAULT_PASS to true in ansible.cfg.
          export ANSIBLE_ASK_VAULT_PASS=false

          export ARA_DATABASE="sqlite:///$WORKSPACE/ara.sqlite"

          export ANSIBLE_HOSTS="$WORKSPACE/integration-hosts.yml"
          # This is an empty version of hosts.yml from rdo-infra-playbooks
          # so that we are easily and safely able to run everything against localhost
          cat > $ANSIBLE_HOSTS << EOF
          all:
            vars:
              public_address: 0.0.0.0
            hosts:
              localhost:
                ansible_connection: local
            children:
              standard:
                hosts:
                  localhost:
              review:
                hosts:
                  localhost:
              dlrn:
                hosts:
                  localhost:
              backup:
                hosts:
                  localhost:
              cico:
                hosts:
                  localhost:
              monitoring:
                hosts:
                  localhost:
              logserver:
                hosts:
                  localhost:
              # TODO: Fix this
              # rabbit_hosts is expected by opstools-ansible
              rabbit_hosts:
                children:
                  monitoring
              monitoring_clients:
                children:
                  standard:
                  review:
                  dlrn:
                  cico:
                  monitoring:
          EOF

          pushd rdo-infra-playbooks
            # Use test data for the runs
            if [ -f samples/secrets.vault.yml ]; then
                cat samples/secrets.vault.yml > playbooks/group_vars/all/secrets.vault.yml
            fi
            ansible-playbook -i $ANSIBLE_HOSTS playbooks/{playbook}.yml \
              -e "rdobot_nickname=not_rdobot" \
              -e "sensu_rabbitmq_server=localhost"
            echo "Re-running for idempotency"
            ansible-playbook -i $ANSIBLE_HOSTS playbooks/{playbook}.yml \
              -e "rdobot_nickname=not_rdobot" \
              -e "sensu_rabbitmq_server=localhost"
          popd

- builder:
    name: fedora-stable-sync-repoclosure
    builders:
      - shell: |
          set -e
          mkdir -p $WORKSPACE/logs
          # cachedir configuration added by dib breaks running some dnf
          # commands with non-root users.
          sudo sed -i '/^cachedir.*/d' /etc/dnf/dnf.conf
          # diskimage builder excludes some packages from repos as pip
          # and virtualenb what breaks synchronization.
          sudo sed -i '/^exclude.*/d' /etc/dnf/dnf.conf
          sudo dnf remove -y yum-utils
          sudo dnf install -y createrepo_c dnf-utils fedora-packager
          git clone https://review.rdoproject.org/r/rdo-infra/sinkhole
          virtualenv -p python3 --system-site-packages .venv
          source .venv/bin/activate
          pushd sinkhole
          pip install .
          popd
          cd $ZUUL_PROJECT
          OUTPUT_DIR=$(grep output_dir fedora_config | cut -d= -f2 | tr -d '[:space:]')
          sudo mkdir -p $OUTPUT_DIR
          sudo chown ${USER} $OUTPUT_DIR
          if [ -f comps*xml ];then
              cp comps*xml $OUTPUT_DIR
          fi
          echo "INFO: Running synchronization using sinkhole"
          sinkhole --config fedora_config
          echo "INFO: Running repoclosure"
          dnf clean all
          repoquery --repofrompath=temp,file://${OUTPUT_DIR} --disablerepo='*' --enablerepo=temp -q -a > $WORKSPACE/logs/repoquery_output.txt
          repoclosure --repofrompath=temp,file://${OUTPUT_DIR} --disablerepo='*' --enablerepo=temp
          if [ -f $OUTPUT_DIR/comps*xml ];then
              rm $OUTPUT_DIR/comps*xml
          fi

- builder:
    name: fedora-stable-imagefactory
    builders:
      - shell: |
          set -e
          mkdir -p $WORKSPACE/logs
          cd $ZUUL_PROJECT
          OUTPUT_DIR=$(grep output_dir fedora_config | cut -d= -f2 | tr -d '[:space:]')
          if [ -d imagefactory ]; then
              cd imagefactory
              sudo bash -x build-image.sh $OUTPUT_DIR
          fi

- job-template:
    name: 'rdo-infra-playbooks-integration-{playbook}{suffix}'
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - rdo-infra-playbooks-prepare
      - rdo-log-setup
      - rdo-infra-playbooks-integration:
          playbook: '{playbook}'
    triggers:
      - zuul
    publishers:
      - postbuildscript:
          builders:
            - shell: |
                  mkdir $WORKSPACE/logs
                  export ARA_DATABASE="sqlite:///$WORKSPACE/ara.sqlite"
                  sudo -E $WORKSPACE/ansible/bin/ara generate html $WORKSPACE/logs/ara

                  # Ensure permissions allow artifact uploading
                  sudo chown -R "$(id -u).$(id -g)" $WORKSPACE/logs
          script-only-if-succeeded: False
          script-only-if-failed: False
      - rdo-rsync-logs
    node: '{image}'
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

- project:
    name: rdo-infra-playbooks-integration
    jobs:
      - 'rdo-infra-playbooks-integration-{playbook}{suffix}':
          playbook:
            - base
            - sensu-client
            - sensu-server
            - logserver
          suffix:
            - ''
            - '-nv'
          image: 'rdo-centos-7'
      - 'rdo-infra-playbooks-integration-{playbook}{suffix}':
          playbook:
            - base
            - sensu-client
          suffix:
            - '-fedora-nv'
          image: 'rdo-fedora-26'

- job:
    name: 'tox-flake8'
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - shell: |
          set +e
          cd $ZUUL_PROJECT
          tox -e flake8
    triggers:
      - zuul
    node: rdo-centos-7

- job:
    name: gate-tox-ansible-lint
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - shell: |
          set +e
          cd $ZUUL_PROJECT
          tox -e ansible-lint
    triggers:
      - zuul
    node: rdo-centos-7

- job:
    name: gate-tox-docs
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - shell: |
          set +e
          pushd $ZUUL_PROJECT
          tox -e docs
          popd

          mkdir logs
          sudo cp -a $ZUUL_PROJECT/doc/build/html logs/
          # Ensure permissions allow artifact uploading
          sudo chown -R "$(id -u).$(id -g)" logs
    triggers:
      - zuul
    publishers:
      - rdo-rsync-logs
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

    node: rdo-centos-7

- job:
    name: rdo-registry-integration
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - shell: |
          set +e
          cd $ZUUL_PROJECT
          ./run_tests.sh
    triggers:
      - zuul
    publishers:
      - postbuildscript:
          builders:
            - shell: |
                  mkdir $WORKSPACE/logs
                  $WORKSPACE/$ZUUL_PROJECT/.tox/ansible-playbook/bin/ara generate html $WORKSPACE/logs/ara

                  # Copy database (experimental)
                  mkdir $WORKSPACE/logs/ara-database
                  cp $HOME/.ara/ansible.sqlite $WORKSPACE/logs/ara-database/ansible.sqlite

                  # Ensure permissions allow artifact uploading
                  sudo chown -R "$(id -u).$(id -g)" $WORKSPACE/logs
          script-only-if-succeeded: False
          script-only-if-failed: False
      - rdo-rsync-logs
    node: rdo-centos-7
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

- job:
    name: test-logs
    defaults: rdo-global
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - shell: |
          set +e
          cd $ZUUL_PROJECT
          ./run_tests.sh
    triggers:
      - zuul
    publishers:
      - postbuildscript:
          builders:
            - shell: |
                  mkdir $WORKSPACE/logs
                  echo "noop" >$WORKSPACE/logs/test.txt

                  # Ensure permissions allow artifact uploading
                  sudo chown -R "$(id -u).$(id -g)" $WORKSPACE/logs
          script-only-if-succeeded: False
          script-only-if-failed: False
      - rdo-rsync-logs
    node: rdo-centos-7
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

- job:
    name: 'fedora-stable-repoclosure'
    defaults: rdo-global
    concurrent: false
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - fedora-stable-sync-repoclosure
    triggers:
      - zuul
    publishers:
      - rdo-rsync-logs
    node: rdo-fedora-26
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY

- job:
    name: 'fedora-stable-image-build-nv'
    defaults: rdo-global
    concurrent: false
    builders:
      - rdo-prepare-workspace
      - rdo-log-setup
      - fedora-stable-sync-repoclosure
      - fedora-stable-imagefactory
    triggers:
      - zuul
    publishers:
      - rdo-rsync-logs
    node: rdo-fedora-26
    wrappers:
      - timestamps
      - credentials-binding:
        - file:
           credential-id: 4b4632bd-f44b-446d-a8ca-b57eabef0a7c
           variable: LOG_SSH_KEY
