- builder:
    name: dlrn-gate-repository
    builders:
      - shell: |
          # This builder, when run from a child job of a DLRN based job,
          # configures the DLRN repository that was uploaded as an artifact
          # of the parent DLRN-rpmbuild job.
          # This allows to install the packages in that repository and test
          # them.
          set +e
          # Re-construct the expected repository URL
          ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)

          # This builder can be shared across different DLRN based jobs.
          # Try and find the right one
          jobs="DLRN-rpmbuild rdoinfo-DLRN-check"
          for job in $jobs;
          do
            LOG_PATH="${BASE_LOG_PATH}/${ZUUL_PIPELINE}/${job}/${ZUUL_REF}"
            artifacts="${SWIFT_artifacts_LOGSERVER_PREFIX}/${LOG_PATH}/artifacts"

            curl -o /dev/null -sIf "${artifacts}" || continue
            break
          done

          # If we couldn't find a working repository, give up
          curl -o /dev/null -sIf "${artifacts}" || exit 1

          # Find the latest repository hash
          # If DLRN built multiple packages, there will be multiple repositories.
          # We want the latest repository which contains all of the packages that were just built.
          hash=$(curl -s "${artifacts}/centos/repos/report.html" |grep repo |sed 's/.*"\([^"]*\)".*/\1/' |head -n1)
          repository="${artifacts}/centos/repos/${hash}"

          # Configure the repository
          name="delorean-zuul-${ZUUL_REF}"
          sudo bash -c "cat << EOF > /etc/yum.repos.d/${name}.repo
          [${name}]
          name=${name}
          baseurl=${repository}
          enabled=1
          gpgcheck=0
          priority=1
          EOF"

- builder:
    name: prepare-dlrn
    builders:
      - shell: |
          set +e
          sudo yum -y install createrepo mock redhat-rpm-config rpmdevtools
          sudo usermod -a -G mock jenkins

          # Build packages in a tmpfs so we don't rely on VM I/O performance
          cat << EOF | sudo tee /etc/mock/site-defaults.cfg
          config_opts['plugin_conf']['tmpfs_enable'] = True
          config_opts['plugin_conf']['tmpfs_opts'] = {}
          config_opts['plugin_conf']['tmpfs_opts']['required_ram_mb'] = 2048
          config_opts['plugin_conf']['tmpfs_opts']['max_fs_size'] = '4g'
          config_opts['plugin_conf']['tmpfs_opts']['mode'] = '0755'
          config_opts['plugin_conf']['tmpfs_opts']['keep_mounted'] = True
          EOF

          # Clone DLRN if it's not provided by Zuul (ex: dist-git commits)
          if [[ ! -e "DLRN" ]]; then
            if [ -e $(which zuul-cloner) ]; then
              zuul-cloner http://review.rdoproject.org/r DLRN
            else
              git clone http://review.rdoproject.org/r/p/DLRN.git --depth 1
            fi
          fi

- job:
    name: 'DLRN-pep8'
    defaults: global
    builders:
      - prepare-workspace
      - shell: |
          set +e
          cd $ZUUL_PROJECT
          tox -e pep8
    triggers:
      - zuul
    node: bare-centos-7

- job:
    name: 'DLRN-py27'
    defaults: global
    builders:
      - prepare-workspace
      - shell: |
          set +e
          cd $ZUUL_PROJECT
          tox -e py27
    triggers:
      - zuul
    node: bare-centos-7

- job:
    name: 'DLRN-rpmbuild'
    defaults: global
    builders:
      - prepare-workspace
      - prepare-dlrn
      - shell: |
          set +e
          # This job supports building reviews for both review.rdoproject.org
          # and review.openstack.org. Builds that are run as third party for
          # review.o.o are in the Zuul pipelines prefixed by "openstack-".
          pushd DLRN
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              timeout --signal=SIGKILL 3600 ./scripts/run_project_tests.sh http://review.rdoproject.org/r/p/rdoinfo.git
              ret=$?
          else
              timeout --signal=SIGKILL 3600 ./scripts/run_tests.sh http://review.rdoproject.org/r/p/rdoinfo.git
              ret=$?
          fi
          popd

          # Retrieve logs/repositories/packages
          mkdir artifacts
          cp -a DLRN/logs/* artifacts/

          exit $ret
    publishers:
      - zuul-swift-upload
    triggers:
      - zuul
    node: bare-centos-7

- job:
    name: 'DLRN-rpmbuild-rpm-packaging'
    defaults: global
    builders:
      - prepare-workspace
      - prepare-dlrn
      - shell: |
          set +e -x
          pushd DLRN
          # FIXME(jpena) this is a temp workaround until we get this properly sorted out
          git fetch http://review.rdoproject.org/r/DLRN refs/changes/59/1559/8 && git cherry-pick FETCH_HEAD

          # Setup virtualenv with tox and use it
          tox -epy27 --notest
          . .tox/py27/bin/activate
          # Prepare config
          baseurl=http://209.132.178.209/repos/
          repo="http://github.com/openstack/rpm-packaging"
          directory="/openstack"
          skip="openstack-macros"
          use_version_from_spec="1"
          pkginfo_driver="dlrn.drivers.gitrepo.GitRepoDriver"
          branch=${ZUUL_BRANCH}

          # Update the configuration
          sed -i "s%#repo=.*%repo=${repo}%" projects.ini
          sed -i "s%#directory=.*%directory=${directory}%" projects.ini
          sed -i "s%#skip=.*%skip=${skip}%" projects.ini
          sed -i "s%#use_version_from_spec=.*%use_version_from_spec=${use_version_from_spec}%" projects.ini
          sed -i "s%pkginfo_driver=.*%pkginfo_driver=${pkginfo_driver}%" projects.ini
          sed -i "s%baseurl=.*%baseurl=${baseurl}%" projects.ini
          sed -i "s%source=.*%source=${branch}%" projects.ini

          # Prepare directories
          mkdir -p data/repos

          if [ -e /usr/bin/zuul-cloner ]; then
            zuul-cloner --workspace data/ git://git.openstack.org openstack/rpm-packaging --branch ${branch}
            mv data/openstack/rpm-packaging data/package_info
          else
            # We're outside the gate, just do a regular git clone
            pushd data/
            # rm -rf first for idempotency
            rm -rf package_info
            git clone "git://git.openstack.org/openstack/rpm-packaging" package_info
            cd package_info
            git checkout ${branch}
            popd
          fi

          # Find out which packages are being tested
          pushd data/package_info
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMT HEAD~1)
          PACKAGES_TO_BUILD=""
          for spec in $CHANGED_FILES; do
            filename=$(echo $spec | awk -F/ '{print $NF}')
            extension=$(echo $filename | awk -F. '{print $NF}')
            if [ "$extension" = "j2" ]; then
                # Remove the .spec.j2 extension
                PACKAGES_TO_BUILD="$PACKAGES_TO_BUILD --package-name $(echo $filename | awk 'BEGIN{FS=OFS="."}{NF--; NF--; print}'"
            fi
          done
          popd
          if [ ! -n "${PACKAGES_TO_BUILD}" ]; then
            exit 0
          fi

          timeout --signal=SIGKILL 3600 dlrn --config-file projects.ini --head-only $PACKAGES_TO_BUILD --dev --local --verbose-mock
          ret=$?

          mkdir -p logs
          rsync -avzr data/repos logs/centos
          # Clean up mock cache, just in case there is a change for the next run
          mock -r data/dlrn-1.cfg --scrub=all

          popd
          mkdir artifacts
          cp -a DLRN/logs/* artifacts/
          exit $ret
    publishers:
      - zuul-swift-upload
    triggers:
      - zuul
    node: bare-centos-7

- job:
    name: 'DLRN-rpmbuild-tripleo-ci'
    defaults: global
    builders:
      - prepare-workspace
      - prepare-dlrn
      - shell: |
          set +e -x
          # This builder should build DLRN packages using the TripleoCI
          # playbooks

          # Install some requirements
          sudo yum install -y python-virtualenv gcc
          virtualenv ${HOME}/venv
          source ${HOME}/venv/bin/activate
          pip install --upgrade pip
          pip install 'ansible>=2.1,<2.2'

          git clone https://github.com/openstack/tripleo-quickstart-extras

          pushd tripleo-quickstart-extras
          # Create config files for ansible
          cat << EOF > hosts
            localhost ansible_connection=local
          EOF

          cat << EOF > build-packages.yaml
          ---
          - name: Build custom RPMs
            hosts: localhost
            roles:
              - build-test-packages
            vars:
              artg_change_list:
               - project: openstack/tripleo-heat-templates
                 branch: master
                 refspec: refs/changes/49/365449/60
                 host: review.openstack.org
              artg_compressed_gating_repo: '/tmp/gating_repo.tar.gz'
          EOF

          # Finally tell ansible to run the playbook to create scripts
          ansible-playbook -i hosts -vvvv build-packages.yaml
          ret=$?
          popd

          mkdir -p artifacts
          cp -p /tmp/gating_repo.tar.gz artifacts
          exit $ret
    publishers:
      - zuul-swift-upload
    triggers:
      - zuul
    node: bare-centos-7
