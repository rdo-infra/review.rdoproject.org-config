- builder:
    name: dlrn-gate-repository
    builders:
      - shell: |
          # This builder, when run from a child job of a DLRN based job,
          # configures the DLRN repository that was uploaded as an artifact
          # of the parent DLRN-rpmbuild job.
          # This allows to install the packages in that repository and test
          # them.
          set +e
          sudo yum install wget

          # Re-construct the expected repository URL
          ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)

          # This builder can be shared across different DLRN based jobs.
          # Try and find the right one
          jobs="DLRN-rpmbuild rdoinfo-DLRN-check"
          for job in $jobs;
          do
            LOG_PATH="${BASE_LOG_PATH}/${ZUUL_PIPELINE}/${job}/${ZUUL_REF}"
            artifacts="${SWIFT_artifacts_LOGSERVER_PREFIX}/${LOG_PATH}/artifacts"

            curl -o /dev/null -sIf "${artifacts}" || continue
            break
          done

          # If we couldn't find a working repository, give up
          curl -o /dev/null -sIf "${artifacts}" || exit 1

          # Find the latest repository hash
          # If DLRN built multiple packages, there will be multiple repositories.
          # We want the latest repository which contains all of the packages that were just built.
          hash=$(wget --spider -r -l2 ${artifacts}/centos/repos/report.html 2>&1 |grep -m1 delorean.repo |awk -F/ '{print $(NF-3)"/"$(NF-2)"/"$(NF-1)}')
          repository="${artifacts}/centos/repos/${hash}"

          # Configure the repository
          name="delorean-zuul-${ZUUL_REF}"
          sudo bash -c "cat << EOF > /etc/yum.repos.d/${name}.repo
          [${name}]
          name=${name}
          baseurl=${repository}
          enabled=1
          gpgcheck=0
          priority=1
          EOF"

- builder:
    name: dlrn-gate-rpmlint
    builders:
      - shell: |
          # This builder, when run from a child job of a DLRN based
          # job, download the packages built from DLRN and compare
          # rpmlint reports from the previously built packages.

          # install needed packages
          sudo yum install -y rpmlint sqlite

          # extract the sha1
          ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)

          # must be in sync with the previous builder (dlrn-gate-repository)
          eval $(grep baseurl= < /etc/yum.repos.d/delorean-zuul-${ZUUL_REF}.repo)

          # download binary packages
          wget -nd -r --accept .rpm --reject .src.rpm ${baseurl}
          unset baseurl

          # get the repo data from the previous repository
          URL=https://trunk.rdoproject.org/centos7/current
          eval $(curl $URL/delorean.repo|grep baseurl=)
          wget $baseurl/repodata/repomd.xml

          # extract the name of primary db from repomd.xml
          db=$(python -c "import xml.etree.ElementTree as et; ns = {'ns0': 'http://linux.duke.edu/metadata/repo'}; print(et.parse('repomd.xml').getroot().find('ns0:data[@type=\"primary_db\"]/ns0:location', ns).attrib['href'])")

          # download this db to get the name of the rpm files
          wget $baseurl/$db

          db=$(basename $db .bz2)
          bunzip2 $db.bz2

          # our rpmlint config
          cat > $HOME/.rpmlintrc <<EOF
          from Config import *

          addFilter("no-changelogname-tag")
          addFilter("no-manual-page-for-binary")
          addFilter("no-documentation")
          addFilter("non-readable")

          # ironic exceptions
          addFilter("openstack-ironic-common.noarch: E: non-standard-dir-perm /var/log/ironic 0?750L?")
          addFilter("python-ironic-tests.noarch: E: wrong-script-interpreter /usr/lib/python2.7/site-packages/ironic/tests/.* ipxe")
          addFilter("python-ironic-tests.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/ironic/tests/.* 0?644L? ipxe")

          # Exceptions for nova
          addFilter("openstack-nova-common.noarch: W: obsolete-not-provided openstack-nova-cert")
          addFilter("python-novajoin.noarch: W: non-standard-gid")
          addFilter("python-novajoin.noarch: W: non-standard-uid")
          addFilter("openstack-nova-compute.noarch: E: explicit-lib-dependency libvirt-client")
          EOF

          # now download all these packages from the previous repository
          mkdir -p old
          for fname in $(ls *.rpm); do
              name=$(rpm -qp --qf '%{NAME}\n' $fname)

              eval $(sqlite3 -line $db "select location_href as pkgfile from packages where name = '$name' and arch != 'src';"|sed 's/ //g')

              # if there is no previous package, it means that's new
              # packages so just run rpmlint on the packages and exit
              if [ -z "$pkgfile" ]; then
                  rpmlint *.rpm | tee rpmlint.new.txt
                  exit 0
              fi

              curl -o old/$pkgfile $baseurl/$pkgfile
          done

          # run rpmlint on old and new packages
          rpmlint *.rpm | sort | tee rpmlint.new.txt
          rpmlint old/*.rpm | sort | tee rpmlint.old.txt

          # check that we have the same number of packages else we
          # cannot really compare and we just exit gracefully
          if [ $(ls *.rpm|wc -l) != $(ls old/*.rpm|wc -l) ]; then
              exit 0
          fi

          # compare if we have more reports with the new packages
          if [ $(wc -l < rpmlint.new.txt) -gt $(wc -l < rpmlint.old.txt) ]; then
              diff -u rpmlint.old.txt rpmlint.new.txt
              exit 1
          fi

- builder:
    name: prepare-dlrn
    builders:
      - shell: |
          set +e
          sudo yum -y install createrepo mock redhat-rpm-config rpmdevtools
          sudo usermod -a -G mock jenkins

          # Clone DLRN
          git clone https://github.com/softwarefactory-project/DLRN --depth 1

- job:
    name: 'DLRN-rpmbuild'
    defaults: global
    builders:
      - prepare-workspace
      - prepare-dlrn
      - shell: |
          set +e
          # This job supports building reviews for both review.rdoproject.org
          # and review.openstack.org. Builds that are run as third party for
          # review.o.o are in the Zuul pipelines prefixed by "openstack-".
          pushd DLRN
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              timeout --signal=SIGKILL 3600 ./scripts/run_project_tests.sh http://review.rdoproject.org/r/p/rdoinfo.git
              ret=$?
          else
              timeout --signal=SIGKILL 3600 ./scripts/run_tests.sh http://review.rdoproject.org/r/p/rdoinfo.git
              ret=$?
          fi
          popd

          # Retrieve logs/repositories/packages
          mkdir artifacts
          cp -a DLRN/logs/* artifacts/

          exit $ret
    publishers:
      - zuul-swift-upload
    triggers:
      - zuul
    node: bare-centos-7

- job:
    name: 'DLRN-rpmbuild-nv'
    defaults: global
    builders:
      - prepare-workspace
      - shell: |
          # Clone DLRN
          git clone https://github.com/softwarefactory-project/DLRN --depth 1

          set +e
          # This job supports building reviews for both review.rdoproject.org
          # and review.openstack.org. Builds that are run as third party for
          # review.o.o are in the Zuul pipelines prefixed by "openstack-".
          pushd DLRN
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              timeout --signal=SIGKILL 3600 ./scripts/run_project_tests.sh http://review.rdoproject.org/r/p/rdoinfo.git
              ret=$?
          else
              timeout --signal=SIGKILL 3600 ./scripts/run_tests.sh http://review.rdoproject.org/r/p/rdoinfo.git
              ret=$?
          fi
          popd

          # Retrieve logs/repositories/packages
          mkdir artifacts
          cp -a DLRN/logs/* artifacts/

          exit $ret
    publishers:
      - zuul-swift-upload
    triggers:
      - zuul
    node: dib-centos-7


- job:
    name: 'DLRN-rpmbuild-rpm-packaging'
    defaults: global
    builders:
      - prepare-workspace
      - prepare-dlrn
      - shell: |
          set +e -x
          pushd DLRN
          # Setup virtualenv with tox and use it
          tox -epy27 --notest
          . .tox/py27/bin/activate
          # Use latest pymod2pkg from Git, to avoid waiting for new releases
          pip install --upgrade git+https://github.com/openstack/pymod2pkg
          # Prepare config
          if [[ "${ZUUL_BRANCH}" =~ stable/ ]]; then    # stable branch
              repo_branch=$(sed "s#stable/##" <<< "${ZUUL_BRANCH}")
              # We only support Ocata and later as stable repos
              if [ "$repo_branch" = "newton" ]; then
                exit 0
              fi
              baseurl=http://rpm-packaging-ci.rdoproject.org/${repo_branch}/repos/
              use_version_from_spec="1"
          else
              # master
              baseurl=http://rpm-packaging-ci.rdoproject.org/repos/
              use_version_from_spec="1"
          fi

          repo="http://github.com/openstack/rpm-packaging"
          directory="/openstack"
          skip="openstack-macros"
          pkginfo_driver="dlrn.drivers.gitrepo.GitRepoDriver"
          branch=${ZUUL_BRANCH}

          # Update the configuration
          sed -i "s%#repo=.*%repo=${repo}%" projects.ini
          sed -i "s%#directory=.*%directory=${directory}%" projects.ini
          sed -i "s%#skip=.*%skip=${skip}%" projects.ini
          sed -i "s%#use_version_from_spec=.*%use_version_from_spec=${use_version_from_spec}%" projects.ini
          sed -i "s%pkginfo_driver=.*%pkginfo_driver=${pkginfo_driver}%" projects.ini
          sed -i "s%baseurl=.*%baseurl=${baseurl}%" projects.ini
          sed -i "s%source=.*%source=${branch}%" projects.ini
          sed -i "s%distro=.*%distro=${branch}%" projects.ini

          # Prepare directories
          mkdir -p data/repos

          if [ -e /usr/bin/zuul-cloner ]; then
            zuul-cloner --workspace data/ git://git.openstack.org openstack/rpm-packaging --branch ${branch}
            mv data/openstack/rpm-packaging data/package_info
          else
            # We're outside the gate, just do a regular git clone
            pushd data/
            # rm -rf first for idempotency
            rm -rf package_info
            git clone "git://git.openstack.org/openstack/rpm-packaging" package_info
            cd package_info
            git checkout ${branch}
            popd
          fi

          # Find out which packages are being tested
          pushd data/package_info
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMT HEAD~1)
          PACKAGES_TO_BUILD=""
          for spec in $CHANGED_FILES; do
            filename=$(echo $spec | awk -F/ '{print $NF}')
            extension=$(echo $filename | awk -F. '{print $NF}')
            if [ "$extension" = "j2" ]; then
                # Remove the .spec.j2 extension
                PACKAGES_TO_BUILD="$PACKAGES_TO_BUILD --package-name $(echo $filename | awk 'BEGIN{FS=OFS="."}{NF--; NF--; print}')"
            fi
          done
          popd
          if [ ! -n "${PACKAGES_TO_BUILD}" ]; then
            exit 0
          fi

          timeout --signal=SIGKILL 5400 dlrn --config-file projects.ini --head-only $PACKAGES_TO_BUILD --dev --local --verbose-mock
          ret=$?

          mkdir -p logs
          rsync -avzr data/repos logs/centos
          # Clean up mock cache, just in case there is a change for the next run
          mock -r data/dlrn-1.cfg --scrub=all

          popd
          mkdir artifacts
          cp -a DLRN/logs/* artifacts/
          exit $ret
    publishers:
      - zuul-swift-upload
    triggers:
      - zuul
    node: bare-centos-7

# Job to check the non-regression of quality of the new packages built
# by DLRN (i.e, distgit reviews)
- job:
    name: gate-rpmlint
    defaults: global
    builders:
        - prepare-workspace
        - dlrn-gate-repository
        - dlrn-gate-rpmlint
    triggers:
        - zuul
    node: bare-centos-7
