- builder:
    name: 'setup_ssh'
    defaults: global
    builders:
      - shell: |
          # The default nodepool image leaves a public key where our nodepool
          # keys go. If this pubkey file is left, it will be used for
          # generating fingerprints, resulting in non-working SSH key exchange.
          rm -f /home/jenkins/.ssh/id_rsa*
          cp /etc/nodepool/id_rsa* $HOME/.ssh/
          chmod 0600 $HOME/.ssh/id_rsa
          chmod 0644 $HOME/.ssh/id_rsa.pub

          # Install the key for root
          cat $HOME/.ssh/id_rsa.pub | sudo tee -a /root/.ssh/authorized_keys

          # The SSH config needs to be set up to ignore HostKeys
          cat << EOF | tee $HOME/.ssh/config
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 0600 $HOME/.ssh/config

- builder:
    name: 'oooq_dlrn_build_packages'
    defaults: global
    builders:
      - shell: |
          # This builder should build DLRN packages and install the repo
          # on this and all sub_nodes
          # tripleo-gate needs to cloned into a roles/ directory

          # Install some requirements for DLRN
          sudo yum install -y python-virtualenv gcc
          virtualenv $HOME/venv
          source $HOME/venv/bin/activate
          pip install --upgrade pip
          pip install 'ansible>=2.1,<2.2'

          mkdir roles
          git clone https://github.com/redhat-openstack/ansible-role-tripleo-gate roles/tripleo-gate

          # Create config files for ansible
          cat << EOF > hosts
            localhost ansible_connection=local
          EOF

          cat << EOF > build-packages.yaml
          ---
          - name: Build custom RPMs
            hosts: localhost
            roles:
              - { role: tripleo-gate, artg_compressed_gating_repo: '$WORKSPACE/repo.tar.gz' }
          EOF

          # For now we need some test change of an upstream project to make
          # this playbook work correctly.
          # TODO: Delete these, replace with actual changes.
          export GERRIT_PATCHSET_REVISION=2d54e4652e5fbf38d02db38929ed8498c54056f6
          export GERRIT_HOST=review.openstack.org
          export GERRIT_BRANCH=master
          export GERRIT_CHANGE_ID=382857

          # Finally tell ansible to run the playbook to create scripts
          ansible-playbook -i hosts -vvvv build-packages.yaml

          # Untar and create the repo on localhost
          tar zxvf repo.tar.gz
          cat << EOF | sudo tee /etc/yum.repos.d/testing.repo
          [testing]
          name=Repo for testing change
          baseurl=file://$WORKSPACE/gating_repo
          priority=15
          gpgcheck=0
          EOF

          while read sub; do
            ssh $sub mkdir -p $WORKSPACE
            scp -r $WORKSPACE/gating_repo $sub:$WORKSPACE/
            scp /etc/yum.repos.d/testing.repo $sub:testing.repo
            ssh $sub "sudo chown root:root testing.repo; sudo mv testing.repo /etc/yum.repos.d/"
          done < /etc/nodepool/sub_nodes_private

- builder:
    name: 'setup_multinode'
    defaults: global
    builders:
      - shell: |
          # repos need to be installed on each subnode
          while read sub; do
            ssh $sub mkdir -p $WORKSPACE/tripleo
            ssh $sub ln -sf $WORKSPACE/tripleo $WORKSPACE/tripleo/new
            ssh $sub git clone https://git.openstack.org/openstack-infra/tripleo-ci $WORKSPACE/tripleo/tripleo-ci
            ssh $sub git clone https://git.openstack.org/openstack-dev/devstack $WORKSPACE/tripleo/devstack
            ssh $sub git clone https://git.openstack.org/openstack-infra/devstack-gate $WORKSPACE/tripleo/devstack-gate
          done < /etc/nodepool/sub_nodes_private

          # Create tripleo root directory that tripleo.sh expects
          mkdir $WORKSPACE/tripleo
          export TRIPLEO_ROOT=$WORKSPACE/tripleo

          # Create a 'new' symlink for devstack to use
          export BASE=$WORKSPACE/tripleo
          ln -sf $WORKSPACE/tripleo $WORKSPACE/tripleo/new

          git clone https://git.openstack.org/openstack-infra/tripleo-ci
          cd tripleo-ci
          ./scripts/tripleo.sh --repo-setup
          ./scripts/tripleo.sh --multinode-setup

- builder:
    name: create_multinode_inventory
    builders:
      - shell: |
          INVENTORY_FILE="$WORKSPACE/hosts"
          cat <<EOF > $INVENTORY_FILE
          127.0.0.2 ansible_user=stack

          [virthost]
          127.0.0.2

          [undercloud]
          127.0.0.2

          [overcloud]
          EOF

          # TODO: replace sub_nodes with their vxlan addresses
          # The /etc/nodepool/sub_nodes_private file contains a list of IPs that
          # have been allocated as additional nodes by nodepool for this job
          # run. These nodes have been set up according to the ready-script
          # listed in the node definition used for the job.
          while read sub; do
            echo -n $sub >> $INVENTORY_FILE
            echo " ansible_user=jenkins" >> $INVENTORY_FILE
          done < /etc/nodepool/sub_nodes_private

          echo '==== Multinode Inventory ===='
          cat $INVENTORY_FILE

- publisher:
    name: tripleo-quickstart-collect-logs
    publishers:
      - postbuildscript:
          builders:
              - shell: |
                  set -eux

                  pushd $WORKSPACE/tripleo-quickstart
                  # This is a hack to override Zuul's timeout.
                  # TODO: figure out how to change the timeout in Zuul.
                  export SWIFT_artifacts_HMAC_BODY=$(python -c "import os; l = os.environ['SWIFT_artifacts_HMAC_BODY'].split('\n'); l[4]='2000000000'; print '\n'.join(l)")
                  bash ci-scripts/collect-logs.sh {topology} rdoproject
                  # trying to upload the logs in different ways
                  /usr/local/bin/zuul_swift_upload.py --verbose --name artifacts --delete-after 2678400 /home/jenkins/workspace/tripleo-quickstart-deploy/tripleo-quickstart/collected_files/*
                  /usr/local/bin/zuul_swift_upload.py --verbose --name artifacts --delete-after 2678400 collected_files/*
                  mv collected_files artifacts
                  /usr/local/bin/zuul_swift_upload.py --verbose --name artifacts --delete-after 2678400 artifacts
                  popd
          script-only-if-succeeded: False
          script-only-if-failed: False

- job:
    name: 'tripleo-quickstart-deploy'
    defaults: global
    builders:
      - setup_ssh
      - oooq_dlrn_build_packages
      - setup_multinode
      - create_multinode_inventory
      - shell: |
          pushd $WORKSPACE
          git clone https://git.openstack.org/openstack/tripleo-quickstart
          # TODO Get quickstart to install these locally
          sudo useradd stack
          sudo wget --progress=dot:giga http://buildlogs.centos.org/centos/7/cloud/x86_64/tripleo_images/master/delorean/ironic-python-agent.tar -O /home/stack/ipa.tar
          sudo wget --progress=dot:giga http://buildlogs.centos.org/centos/7/cloud/x86_64/tripleo_images/master/delorean/overcloud-full.tar -O /home/stack/overcloud-full.tar
          sudo tar xvf /home/stack/ipa.tar -C /home/stack/
          sudo tar xvf /home/stack/overcloud-full.tar -C /home/stack/
          sudo chown -R stack:stack /home/stack

          # Install tripleo-ci into stack's homedir so quickstart can use the heat templates
          sudo su - stack -c "git clone https://github.com/openstack-infra/tripleo-ci /home/stack/tripleo-ci"

          pushd $WORKSPACE/tripleo-quickstart
          ./quickstart.sh --install-deps

          # Do more system setup for the quickstart run
          sudo yum install -y python-tripleoclient openstack-tempest python-aodh-tests python-ceilometer-tests python-heat-tests python-ironic-tests python-keystone-tests python-manila-tests python-mistral-tests python-neutron-tests python-sahara-tests python-zaqar-tests
          sudo hostnamectl set-hostname --transient $(hostnamectl --static)

          cat <<EOF > playbooks/quickstart-multinode.yml
          - include: quickstart.yml

          - name: Run overcloud prep roles
            hosts: undercloud
            gather_facts: no
            roles:
              - { role: overcloud-prep-images, step_overcloud_image: false, step_glance_upload: true, step_register: false }

          - name: install the overcloud
            hosts: undercloud
            gather_facts: no
            roles:
              - overcloud-deploy

          - name: Add the overcloud nodes to the generated inventory
            hosts: undercloud
            gather_facts: yes
            tags:
              - overcloud-deploy
            vars:
                inventory: all
            roles:
              - tripleo-inventory
          EOF

          cat <<EOF > deploy_args.yml
          extra_args: "-e /home/stack/tripleo-ci/test-environments/multinode.yaml \
          -e /usr/share/openstack-tripleo-heat-templates/environments/deployed-server-environment.yaml \
          -e /home/stack/tripleo-ci/test-environments/worker-config.yaml \
          --compute-scale 0 \
          --overcloud-ssh-user jenkins \
          --validation-errors-nonfatal"
          overcloud_prep_images_script: "/tmp/overcloud-prep-images.sh.j2"
          undercloud_instackenv_template: "/tmp/instackenv.json.j2"
          ssl_overcloud: false
          network_isolation: false
          flavor_args: ""
          EOF

          cat <<EOF > /tmp/overcloud-prep-images.sh.j2
          #!/bin/bash
          set -eux
          source {{ working_dir }}/stackrc
          openstack overcloud image upload {% if bash_deploy_ramdisk %}--old-deploy-image{% endif %}
          EOF

          # Set CONTROLLER|COMPUTE_HOSTS so that the deployed-server heat templates can pick it up
          export CONTROLLER_HOSTS=$(sed -n 1,1p /etc/nodepool/sub_nodes)
          export COMPUTE_HOSTS=

          # Copy the instackenv template to homedir so it can be used outside libvirt/overcloud role
          cp $WORKSPACE/tripleo-quickstart/roles/libvirt/setup/overcloud/templates/instackenv.json.j2 /tmp/instackenv.json.j2

          ./quickstart.sh \
                  --working-dir $WORKSPACE/ \
                  --no-clone \
                  --retain-inventory \
                  --tags provision,undercloud-scripts \
                  --teardown none \
                  --ansible-debug \
                  --release master \
                  --config config/general_config/minimal.yml \
                  --extra-vars undercloud_local_interface=br-ex \
                  --extra-vars @deploy_args.yml \
                  --playbook quickstart-multinode.yml \
                  --requirements quickstart-extras-requirements.txt \
                  127.0.0.2

          # Disable the overcloud check in the overcloud-deploy script.
          # This is necessary because we are using already-deployed hosts with
          # nodepool.
          sudo sed -i -e '/Wait until there are/,+6d' /home/stack/overcloud-deploy.sh

          # Finish the installation
          #ssh -F $HOME/.quickstart/ssh.config.local.ansible undercloud ./undercloud-install.sh
          #ssh -F $HOME/.quickstart/ssh.config.ansible undercloud ./overcloud-deploy.sh
          #sudo su - stack -c "./overcloud-deploy.sh"
          #sudo -Eu stack sh -c /home/stack/overcloud-deploy.sh
          #sudo -Eu stack sh -c /home/stack/overcloud-deploy-post.sh
          #ssh -F $HOME/.quickstart/ssh.config.local.ansible undercloud ./overcloud-deploy-post.sh
          #ssh -F $HOME/.quickstart/ssh.config.local.ansible undercloud ./overcloud-validate.sh
    triggers:
      - zuul
    node: rdo-centos-7-2-node
    publishers:
      - tripleo-quickstart-collect-logs:
          topology: 'minimal'
