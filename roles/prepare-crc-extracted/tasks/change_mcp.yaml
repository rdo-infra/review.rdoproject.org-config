---
- name: Get node name
  ansible.builtin.shell: |
    oc get nodes --no-headers | awk '{print $1}'
  register: _crc_node

- name: Get last rendered machineconfig
  ansible.builtin.shell: >
    set -o pipefail;
    oc get mc --sort-by=.metadata.creationTimestamp |
    grep rendered-{{ item }} |
    tail -n1 |
    awk '{print $1}'
  register: _new_mc
  failed_when: _new_mc.rc not in [0,1]
  changed_when: false

- name: Patch node - {{ _crc_node.stdout }} to use {{  _new_mc.stdout }} machineconfig
  ansible.builtin.shell: >
    oc patch node {{ _crc_node.stdout }}
    --type merge
    -p '{"metadata": {"annotations": {"{{ mc_item.key }}": "{{ mc_item.value }}" }}}'
  loop:
    - key: machineconfiguration.openshift.io/currentConfig
      value: "{{ _new_mc.stdout }}"
    - key: machineconfiguration.openshift.io/desiredConfig
      value: "{{ _new_mc.stdout }}"
    - key: machineconfiguration.openshift.io/reason
      value: ""
    - key: machineconfiguration.openshift.io/ssh
      value: accessed
    - key: machineconfiguration.openshift.io/state
      value: Done
  loop_control:
    loop_var: mc_item
  changed_when: false

- name: Create a file to force trigger reconfiguration
  become: true
  ansible.builtin.file:
    path: /run/machine-config-daemon-force
    state: touch
