---
- name: Recover idnum
  command: cat {{ ovb_working_dir }}/idnum
  register: idnum_shell
  changed_when: false

- name: Set fact for idnum
  set_fact:
    idnum: "{{ idnum_shell.stdout }}"

- name: Copy DNS file from job to keep it in logs
  become: true
  command: cp /etc/resolv.conf /etc/resolv-from-job.conf
  changed_when: true

- name: Override DNS settings from job to known ones
  when: "'internal' not in cloudenv|default('')"
  become: true
  copy:
    dest: /etc/resolv.conf
    content: |
      nameserver 127.0.0.1
      nameserver 1.1.1.1
      nameserver 8.8.8.8

- name: Override DNS settings from job to known ones - internal
  when: "'internal' in cloudenv|default('')"
  become: true
  copy:
    dest: /etc/resolv.conf
    content: |
      {% for server in custom_nameserver %}
      nameserver {{ server }}
      {% endfor %}

- name: Find out undercloud host ID
  import_tasks: find_undercloud_uuid.yml

- name: Generate clouds.yaml file
  include_tasks: ovb-clouds-config.yml
  when: create_clouds_yaml|bool

- name: Start deletion process
  block:

    - name: Find out all servers
      command: "{{ ovb_working_dir }}/.venv/bin/openstack server list -f value -c Name --name {{ idnum }}"
      register: servers

    - name: Dump console log of servers, removing stack id
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack console log show {{ item }} > {{ logs_dir }}/{{ item|regex_replace('-[0-9]*','') }}-console.log"
      loop: "{{ servers.stdout_lines }}"
      failed_when: false
      environment:
        PYTHONIOENCODING: 'utf-8'

    - name: Remove instance from provision OVB network
      command: "{{ ovb_working_dir }}/.venv/bin/openstack server remove network {{ undercloud_uuid }} ctlplane-{{ idnum }}"
      when: attach_to_ovb_networks|bool

    - name: Remove instance from private OVB network
      command: "{{ ovb_working_dir }}/.venv/bin/openstack server remove network {{ undercloud_uuid }} private-{{ idnum }}"
      when:
        - create_private_network|bool
        - attach_to_ovb_networks|bool

    - name: Remove instance from public OVB network
      command: "{{ ovb_working_dir }}/.venv/bin/openstack server remove network {{ undercloud_uuid }} public-{{ idnum }}"
      when: net_iso and net_iso != 'none' and attach_to_ovb_networks|bool

    - name: List ports of baremetal for delete
      command: "{{ ovb_working_dir }}/.venv/bin/openstack port list --network {{ item.net }} -f value -c id"
      loop:
        - { net: "ctlplane-{{ idnum }}", delete: true }
        - { net: "private-{{ idnum }}", delete: "{% if create_private_network|bool %}true{% endif %}" }
        - { net: "public-{{ idnum }}", delete: "{% if net_iso and net_iso != 'none' %}true{% endif %}" }
      register: baremetal_ports
      when: item.delete|bool
      ignore_errors: true

    - name: Create script for removing ports
      template:
        src: baremetal_ports.j2
        dest: "{{ ovb_working_dir }}/delete_baremetal_ports.sh"
        mode: 0755
      when: baremetal_ports.results

    - name: Delete baremetal ports of OVB networks
      command: "{{ ovb_working_dir }}/delete_baremetal_ports.sh"
      when: baremetal_ports.results
      failed_when: false
      changed_when: true

    # NOTE(dpawlik): Run previous solution in case, when new script
    # will fail. Nothing will happen when the same port will be second
    # time triggered to delete.
    - name: Delete baremetal ports of OVB networks - old way
      command: "{{ ovb_working_dir }}/.venv/bin/openstack port delete {{ item.stdout | replace('\n', ' ') }}"
      loop: "{{ baremetal_ports.results }}"
      when: '"stdout" in item and item.stdout'
      failed_when: false
      changed_when: true

    - name: Wait a little until ports are deleted
      pause:
        seconds: 10

    - name: Delete extra node key
      command: >-
        {{ ovb_working_dir }}/.venv/bin/openstack keypair delete {{ extra_node_key_name }}-{{ idnum }}
      when:
        - extra_node|bool
        - extra_node_create_key|bool
      failed_when: false

    # security group name derived from
    # https://github.com/openstack/openstack-virtual-baremetal/
    # blob/stable/2.0/templates/baremetal-ports-extra-node.yaml#L22-L28
    - name: Delete extra node security groups
      command: >-
        {{ ovb_working_dir }}/.venv/bin/openstack security group delete _extranode-baremetal-{{ idnum }}-extra__0_sg
      when:
        - extra_node|bool
      failed_when: false

    - name: Delete extra stack
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack delete {{ stack_name }}-extra -y"
      when: extra_node|bool
      changed_when: true

    - name: Delete stack
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack delete {{ stack_name }} -y"

    - name: Wait until stack is deleted of failed
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }} -f yaml"
      register: result
      until: ("IN_PROGRESS" not in result.stdout or result.rc != 0)
      retries: 10
      delay: 30
      ignore_errors: true
      changed_when: false

    - name: Check stack status if exists
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }} -f yaml"
      register: stack_exists
      failed_when: stack_exists.rc == 0
      changed_when: false

    - name: Check extra node stack status if exists
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }}-extra -f yaml"
      register: extra_stack_exists
      failed_when: extra_stack_exists.rc == 0
      changed_when: false

  rescue:
    # Don't fail a job if OVB can't delete, only if fail_in_remove is true
    - name: Show stack status if exists
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }} -f yaml"
      register: stack_exists
      ignore_errors: true

    - name: Show extra stack status if exists
      command: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }}-extra -f yaml"
      register: extra_stack_exists
      ignore_errors: true
      when: extra_node|bool
      changed_when: false

    - name: Print stack status
      debug: msg="{{ stack_exists.stdout }}"
      failed_when: false

    - name: Print extra stack status
      debug: msg="{{ extra_stack_exists.stdout }}"
      failed_when: false
      when: extra_node|bool

    - name: Fail a job if OVB can't delete
      fail:
        msg: "Failed to delete OVB stack!"
      when: fail_in_remove|bool and stack_exists.rc == 0

    - name: Fail a job if OVB extra stack can't delete
      fail:
        msg: "Failed to delete OVB extra node stack!"
      when:
        - extra_node|bool
        - fail_in_remove|bool
        - extra_stack_exists.rc == 0

  always:

    - name: remove clouds.yaml file
      file:
        path: "{{ clouds_yaml }}"
        state: absent
      when: create_clouds_yaml|bool

  environment:
    - OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml }}"
    - OS_CLOUD: "{{ cloud_name }}"
