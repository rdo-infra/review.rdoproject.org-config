---
- name: Recover idnum
  shell: cat {{ ovb_working_dir }}/idnum
  register: idnum_shell

- name: Set fact for idnum
  set_fact:
    idnum: "{{ idnum_shell.stdout }}"

- name: Find out undercloud host ID
  include: find_undercloud_uuid.yml

- name: Generate clouds.yaml file
  template:
    src: clouds.yaml.j2
    dest: "{{ clouds_yaml }}"
    mode: 0755

- name: Start deletion process
  block:

    - name: Find out all servers
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack server list -f value -c Name --name {{ idnum }}"
      register: servers

    - name: Dump console log of servers, removing stack id
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack console log show {{ item }} > {{ logs_dir }}/{{ item|regex_replace('-[0-9]*','') }}-console.log"
      loop: "{{ servers.stdout_lines }}"
      ignore_errors: true
      environment:
        PYTHONIOENCODING: 'utf-8'

    - name: List ports of baremetal for delete
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack port list --network {{ item.net }} -f value -c id"
      loop:
        - { net: "provision-{{ idnum }}", delete: true }
        - { net: "public-{{ idnum }}", delete: "{% if net_iso and net_iso != 'none' %}true{% endif %}" }
      register: baremetal_ports
      when: item.delete|bool
      ignore_errors: true

    - name: Delete baremetal ports of OVB networks
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack port delete {{ item.stdout | replace('\n', ' ') }}"
      loop: "{{ baremetal_ports.results }}"
      when: '"stdout" in item and item.stdout'
      ignore_errors: true

    - name: Wait a little until ports are deleted
      pause:
        seconds: 10

    - name: Delete extra node key
      shell: >-
        {{ ovb_working_dir }}/.venv/bin/openstack keypair delete {{ extra_node_key_name }}-{{ idnum }}
      when: extra_node|bool
      ignore_errors: true

    - name: Delete stack
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack delete {{ stack_name }} -y"

    - name: Delete extra stack
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack delete {{ stack_name }}-extra -y"
      when: extra_node|bool

    - name: Wait until stack is deleted of failed
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }} -f yaml"
      register: result
      until: ("IN_PROGRESS" not in result.stdout or result.rc != 0)
      retries: 10
      delay: 30
      ignore_errors: true

    - name: Check stack status if exists
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }} -f yaml"
      register: stack_exists
      failed_when: stack_exists.rc == 0

    - name: Check extra node stack status if exists
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }}-extra -f yaml"
      register: extra_stack_exists
      failed_when: extra_stack_exists.rc == 0

  rescue:
    # Don't fail a job if OVB can't delete, only if fail_in_remove is true
    - name: Show stack status if exists
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }} -f yaml"
      register: stack_exists
      ignore_errors: true

    - name: Show extra stack status if exists
      shell: "{{ ovb_working_dir }}/.venv/bin/openstack stack show {{ stack_name }}-extra -f yaml"
      register: extra_stack_exists
      ignore_errors: true
      when: extra_node|bool

    - name: Print stack status
      debug: msg="{{ stack_exists.stdout }}"
      ignore_errors: true

    - name: Print extra stack status
      debug: msg="{{ extra_stack_exists.stdout }}"
      ignore_errors: true
      when: extra_node|bool

    - name: Fail a job if OVB can't delete
      fail:
        msg: "Failed to delete OVB stack!"
      when: fail_in_remove|bool and stack_exists.rc == 0

    - name: Fail a job if OVB extra stack can't delete
      fail:
        msg: "Failed to delete OVB extra node stack!"
      when:
        - extra_node|bool
        - fail_in_remove|bool
        - extra_stack_exists.rc == 0

  always:

    - name: remove clouds.yaml file
      file:
        path: "{{ clouds_yaml }}"
        state: absent

  environment:
    - OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml }}"
    - OS_CLOUD: "{{ cloud_name }}"
