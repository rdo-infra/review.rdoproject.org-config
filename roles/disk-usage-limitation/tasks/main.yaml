---
- name: Get block device major:minor
  become: true
  ansible.builtin.shell: |
    lsblk -nd -o MAJ:MIN {{ main_blk_name }}
  register: _blk_dev
  changed_when: false

# NOTE: That role is applied in very early stage, so
# some of the cgroup dirs might not exists yet especially
# on other hosts than crc host.
# Create the cgroup dirs just to set the limit for the future.
- name: Ensure that some cgroup dirs exists
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - /sys/fs/cgroup/init.scope
    - /sys/fs/cgroup/machine.slice
    - /sys/fs/cgroup/system.slice
    - /sys/fs/cgroup/user.slice

- name: Enable IO limit
  become: true
  ansible.builtin.lineinfile:
    path: /etc/systemd/system.conf
    regexp: '^#DefaultIOAccounting=no'
    line: 'DefaultIOAccounting=yes'
  notify:
    - Reload systemd daemon after enabling IOAccounting

- name: Flush handlers that will call systemd daemon-reload
  ansible.builtin.meta: flush_handlers

- name: Wait for system.slice cgroup to have io.max file
  become: true
  ansible.builtin.wait_for:
    path: /sys/fs/cgroup/system.slice/io.max
    state: present
    timeout: 30

- name: Set IOPS limit in the root cgroup
  become: true
  ansible.builtin.shell: >
    echo "{{ _blk_dev.stdout }}
    riops={{ iops_limit }}
    wiops={{ iops_limit }}
    rbps={{ rw_total_limit }}
    wbps={{ rw_total_limit }}" > {{ item }}
  loop:
    - /sys/fs/cgroup/init.scope/io.max
    - /sys/fs/cgroup/machine.slice/io.max
    - /sys/fs/cgroup/system.slice/io.max
    - /sys/fs/cgroup/user.slice/io.max
    - /sys/fs/cgroup/kubepods.slice/io.max
  ignore_errors: true # noqa: ignore-errors
  changed_when: false

- name: Verify the IOPS limit
  ansible.builtin.shell: >
    echo "init";    cat /sys/fs/cgroup/init.scope/io.max;
    echo "machine"; cat /sys/fs/cgroup/machine.slice/io.max;
    echo "system";  cat /sys/fs/cgroup/system.slice/io.max;
    echo "user";    cat /sys/fs/cgroup/user.slice/io.max;
    echo "kubernetes";    cat /sys/fs/cgroup/kubepods.slice/io.max;
  register: _current_io_max
  ignore_errors: true # noqa: ignore-errors
  changed_when: false

- name: Print the current io.max value
  when: _current_io_max is defined and _current_io_max
  ansible.builtin.debug:
    msg: "{{ _current_io_max.stdout_lines }}"
