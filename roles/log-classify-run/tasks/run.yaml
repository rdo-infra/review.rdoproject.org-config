---
- name: Check for pre-installed log-classify
  command: bash -c "type -p logreduce"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin"
  register: _logclassify_cmd_path
  failed_when: false
  changed_when: false

- name: Set logclassify_cmd fact
  set_fact:
    logclassify_cmd: "{{ _logclassify_cmd_path.stdout }}{% if logclassify_debug %} --debug{% endif %}"

- name: Foce the model_per_project option for known job to have different output per project
  set_fact:
    logclassify_model_per_project: true
  when: "'tox' in zuul.job"

- name: Set model name
  set_fact:
    _model_name: "{% if logclassify_model_per_project %}{{ zuul.project.name }}/{% endif %}{{ zuul.job }}/{{ zuul.branch }}.clf"

- name: Set model path
  set_fact:
    _model_path: "{{ logclassify_tmp_dir }}/{{ _model_name }}"

- name: Create directories
  file:
    path: "{{ item }}"
    owner: "{{ ansible_user }}"
    mode: 0700
    state: directory
  loop:
    - "{{ logclassify_tmp_dir }}"

- name: Download pre-built model
  get_url:
    url: "{{ logclassify_model_store_url }}/{{ _model_name }}"
    dest: "{{ _model_path }}"
  failed_when: false

- name: Check pre-built model
  command: "{{ logclassify_cmd }} model-check {{ _model_path }} --max-age {{ logclassify_model_age }}"
  register: _model_check
  failed_when: _model_check.rc not in [0, 4]

- name: Detect anomalies
  command: >
    timeout {{ logclassify_max_run_time }}s {{ logclassify_cmd }} dir-run {{ _model_path }}
      --threshold {{ logclassify_threshold }}
      --before-context {{ logclassify_before_context }}
      --after-context {{ logclassify_after_context }}
      {{ logclassify_local_dir }}/
      --html {{ logclassify_tmp_dir }}/log-classify.html
      {% if logclassify_static_location %}--static-location {{ logclassify_static_location }}{% endif %}
  register: _model_run
  failed_when: _model_run.rc not in [0, 4]
  when:
    - _model_check.rc == 0

- block:
    - name: Fetch report
      synchronize:
        src: "{{ logclassify_tmp_dir }}/log-classify.{{ item }}"
        dest: "{{ zuul.executor.log_root }}/log-classify.{{ item }}"
        mode: pull
      loop:
        - html
        - json

    - name: Return the report artifact
      zuul_return:
        data:
          zuul:
            artifacts:
              - name: "LogReduce report"
                url: "log-classify.html"
  when:
    - _model_check.rc == 0
    - _model_run.rc == 0
