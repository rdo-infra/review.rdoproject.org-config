- hosts: all
  name: Autoconverted job legacy-rdoinfo-upper-constraints-update-queens from old
    job rdoinfo-upper-constraints-update-queens
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - name: clone
      shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://opendev.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

          if [[ "${ZUUL_PIPELINE}" =~ "periodic" ]]; then
          # Note (trown): we need to make sure we clone this to the same
          # location as zuul-cloner will so that manual and periodic jobs
          # can share builders
              git clone --depth=1 $GIT_SOURCE/$ZUUL_PROJECT $ZUUL_PROJECT
          else
              /usr/zuul-env/bin/zuul-cloner -v $GIT_SOURCE $ZUUL_PROJECT
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true

    - name: rdoinfo-upper-constraints-update
      shell:
        cmd: |
          set +e -x
          cat >> ~/.ssh/config << EOF

          Host review.rdoproject.org
            IdentityFile ~/.ssh/rdoinfo_id_rsa
          EOF

          ssh-keyscan -p 29418 review.rdoproject.org >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          virtualenv --system-site-packages ~/.venv
          source ~/.venv/bin/activate
          pip install 'ruamel.yaml<=0.15' git-review
          # Install releng, needed for update_uc command
          pushd {{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/rdo-infra/releng'].src_dir }}
          pip install .
          popd

          cd $ZUUL_PROJECT
          for RELEASE in {{ stable_releases }} ; do
            # Ensure we have a fresh repo for each release
            git reset --hard origin/master
            if [ "$RELEASE" != "master" ]; then
              GIT_BRANCH="stable/$RELEASE"
              UC_BRANCH="$RELEASE"
            else
              UC_BRANCH="victoria-uc"
              GIT_BRANCH="master"
            fi
            curl -o upper-constraints.txt "https://opendev.org/openstack/requirements/raw/branch/${GIT_BRANCH}/upper-constraints.txt"
            update_uc -t $UC_BRANCH
            DIFF=$(git diff *.yml */*.yml)
            if [ -n "$DIFF" ]; then
              # Check for an open change, if so reuse it
              change_info=$(ssh -p 29418 rdo-trunk@review.rdoproject.org \
              gerrit query --current-patch-set status:open project:rdoinfo owner:rdo-trunk branch:master \
                topic:rdoinfo-uc-update-"$RELEASE")
              previous=$(echo "$change_info" | grep "^  number:" | awk '{print $2}')
              if [ -n "$previous" ]; then
                  CHANGE_ID=$(echo "$change_info" | grep "^change" | awk '{print $2}')
                  COMMIT_MSG="Bump rdoinfo $UC_BRANCH tags to latest upper-constraints\n\nChange-Id: $CHANGE_ID\n"
              else
                  COMMIT_MSG="Bump rdoinfo $UC_BRANCH tags to latest upper-constraints"
              fi
              git config user.name "rdo-trunk"
              git config user.email "javier.pena@redhat.com"
              git config gitreview.username "rdo-trunk"
              git checkout -b proposal
              git review -s -v
              echo -e $COMMIT_MSG | git commit -F- *.yml */*.yml
              # Just in case, check if there are changes between this version and the current review
              DIFF_RDO=0
              for i in $(ls *yml */*yml 2>/dev/null); do
                  curl https://review.rdoproject.org/r/changes/rdoinfo~master~$CHANGE_ID/revisions/current/files/$i/content |base64 -d > $i.current
                  diff $i $i.current
                  if [ $? -ne 0 ]; then
                      DIFF_RDO=1
                  fi
              done
              if [ $DIFF_RDO -ne 0 ]; then
                  git review -t "rdoinfo-uc-update-$RELEASE" < /dev/null
              fi
            fi
          done
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true
