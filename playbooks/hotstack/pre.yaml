---
- name: Create necessary files to deploy hotstack scenario
  hosts: hotstack
  vars:
    hotstack_work_dir: "{{ ansible_user_dir }}/hotstack"
  roles:
    - role: prepare-workspace
    - role: add-authorized-keys
      public_keys:
        # Harald JensÃ¥s (hjensas)
        - public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCINPOs6XsfMVQMqjmiduT3Bxhogy7\
            MbAFOWlR+9LlKkTW1kV6glsCXY5svtggd2zRtc40UWalHaj9jC+yEkZdI35h2PkK+Sww\
            52u4nczqgNpIFNt7Dm2xtYKbTolAV9jSeNkRlGMCq9EBzQlwiV0HkHx1CdNR/zzXbyNZ\
            LmOybFkXqR150H01kUhdv0v6AMWTDZjMEWO/PaWCOgzZhH9ztXjy+rwa7pdaI4+0Pb9K\
            ib+d8/IrgNsLB/sCazqD+9/COI6AHqzTDS1aU9/gMQrUN1ronzMEQhzzOuoI8WeLqU++\
            j+0dT2UWVPlQqoln+RYu7dUn/DSZDrsYenudT5+P"
  tasks:
    - name: Assert cloud name and cloud secret
      no_log: true
      ansible.builtin.assert:
        that:
          - cloud_name is defined
          - cloud_secrets is defined
          - cloud_name in cloud_secrets
          - cloud_secrets[cloud_name] is defined
          - cloud_secrets[cloud_name].auth_url is defined
          - cloud_secrets[cloud_name].identity_api_version is defined
          - cloud_secrets[cloud_name].region_name is defined
          - (cloud_secrets[cloud_name].username is defined or
             cloud_secrets[cloud_name].application_credential_id is defined)
          - (cloud_secrets[cloud_name].password is defined or
             cloud_secrets[cloud_name].application_credential_secret is defined)

    - name: Enesure openstack release repo is installed
      become: true
      ansible.builtin.dnf:
        name: centos-release-openstack-epoxy
        state: present

    - name: Install openstack client packages
      become: true
      ansible.builtin.dnf:
        name:
          - python-openstackclient
          - python-heatclient
          - python3-openstacksdk
        state: present

    - name: Ensure HotStack work dir
      ansible.builtin.file:
        path: "{{ hotstack_work_dir }}"
        state: directory
        mode: "0750"

    - name: Ensure etc directories
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: "{{ ansible_user }}"
        mode: "0750"
      loop:
        - /etc/openstack
        - /etc/hotstack

    - name: Ensure .ssh dir exists
      no_log: true
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0700

    - name: Ensure ssh keypair exists
      no_log: true
      ansible.builtin.command:
        cmd: >-
          ssh-keygen -q -t rsa -b 4096 -N '' -f {{ ansible_user_dir }}/.ssh/id_rsa
        creates: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"

    - name: Generate cert and load related vars
      when: cloud_secrets[cloud_name].ca_cert is defined
      become: true
      block:
        - name: Generate CA cert file
          ansible.builtin.copy:
            content: "{{ cloud_secrets[cloud_name].ca_cert }}"
            dest: "{{ cloud_secrets[cloud_name].ca_cert_path }}"
            mode: 0755

        - name: Update CA certs
          ansible.builtin.command: update-ca-trust

    - name: Set _auth_type fact
      no_log: true
      ansible.builtin.set_fact:
        _auth_type: >-
          {%- if cloud_secrets[cloud_name].auth_type is defined -%}
          {%- set _type = cloud_secrets[cloud_name].auth_type -%}
          {%- elif cloud_secrets[cloud_name].identity_api_version == 3 -%}
          {%- set _type = 'v3password' -%}
          {%- else -%}
          {%- set _type = 'password' -%}
          {%- endif -%}
          {{ _type }}

    - name: Cloud secret is user credential - Create temporary application credential
      when: _auth_type in ['v3password', 'password']
      block:
        - name: Write clouds.yaml - user/password
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/openstack/clouds.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              clouds:
                default:
                  auth_type: {{ _auth_type }}
                  identity_api_version: {{ cloud_secrets[cloud_name].identity_api_version }}
                  region_name: {{ cloud_secrets[cloud_name].region_name }}
              {% if cloud_secrets[cloud_name].ca_cert_path is defined %}
                  cacert: {{ cloud_secrets[cloud_name].ca_cert_path }}
              {% endif %}
                  auth:
                    auth_url: {{ cloud_secrets[cloud_name].auth_url }}
                    username: {{ cloud_secrets[cloud_name].username }}
                    password: {{ cloud_secrets[cloud_name].password }}
                    project_name: {{ cloud_secrets[cloud_name].project_name }}
                    user_domain_name: {{ cloud_secrets[cloud_name].user_domain_name }}
                    project_domain_name: {{ cloud_secrets[cloud_name].project_domain_name }}

        - name: Create application credential for sushy-emulator
          no_log: true
          environment:
            OS_CLOUD: default
          vars:
            expiration_time: >-
              {{
                 '%Y-%m-%dT%H:%M:%S'
                 | strftime(ansible_date_time.epoch | int + zuul.timeout + 300)
                 | ansible.builtin.quote
              }}
          ansible.builtin.command:
            cmd: >
              openstack application credential create hotstack-{{ zuul.build }}
              --unrestricted
              --expiration {{ expiration_time }}
              --format json
              --column id
              --column secret
          register: _app_credential_out

        - name: Dump the application credential result to file
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/hotstack/_app_credential_out"
            owner: root
            group: root
            mode: "0640"
            content: "{{ _app_credential_out }}"

        - name: Assert application credential creation
          no_log: true
          ansible.builtin.assert:
            that:
            - _app_credential_out.rc == 0
            - _app_credential_out.stdout | from_json | length == 2
          ignore_errors: true

        - name: Assert application credential id and secret
          no_log: true
          vars:
            application_credential: "{{ _app_credential_out.stdout | from_json }}"
          ansible.builtin.assert:
            that:
              - application_credential.id is defined
              - application_credential.secret is defined
          ignore_errors: true

        - name: Write application credential to file
          no_log: true
          vars:
            application_credential: "{{ _app_credential_out.stdout | from_json }}"
          become: true
          ansible.builtin.copy:
            dest: "/etc/hotstack/application-credential.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              application_credential_id: {{ application_credential.id }}
              application_credential_secret: {{ application_credential.secret }}
          ignore_errors: true

        - name: Write new clouds.yaml with application credentials
          no_log: true
          vars:
            application_credential: "{{ _app_credential_out.stdout | from_json }}"
          become: true
          ansible.builtin.copy:
            dest: "/etc/openstack/clouds.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              clouds:
                default:
                  identity_api_version: {{ cloud_secrets[cloud_name].identity_api_version }}
                  region_name: {{ cloud_secrets[cloud_name].region_name }}
              {% if cloud_secrets[cloud_name].ca_cert_path is defined %}
                  cacert: {{ cloud_secrets[cloud_name].ca_cert_path }}
              {% endif %}
                  auth_type: v3applicationcredential
                  auth:
                    auth_url: {{ cloud_secrets[cloud_name].auth_url }}
                    application_credential_id: {{ application_credential.id }}
                    application_credential_secret: {{ application_credential.secret }}
          ignore_errors: true
          register: _clouds_yaml_out

        - name: Dump the clouds.yaml with application credentials result to file
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/hotstack/_clouds_yaml_out"
            owner: root
            group: root
            mode: "0640"
            content: "{{ _clouds_yaml_out }}"

        - name: Write new clouds.yaml with application credentials
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/openstack/clouds.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              clouds:
                default:
                  identity_api_version: {{ cloud_secrets[cloud_name].identity_api_version }}
                  region_name: {{ cloud_secrets[cloud_name].region_name }}
              {% if cloud_secrets[cloud_name].ca_cert_path is defined %}
                  cacert: {{ cloud_secrets[cloud_name].ca_cert_path }}
              {% endif %}
                  auth_type: v3applicationcredential
                  auth:
                    auth_url: {{ cloud_secrets[cloud_name].auth_url }}
                    application_credential_id: {{ (_app_credential_out.stdout | from_json).id }}
                    application_credential_secret: {{ (_app_credential_out.stdout | from_json).secret }}
          ignore_errors: true
          register: _clouds_yaml_out2

        - name: Dump the clouds.yaml with application credentials result to file
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/hotstack/_clouds_yaml_out_no_vars"
            owner: root
            group: root
            mode: "0640"
            content: "{{ _clouds_yaml_out2 }}"

        - name: FAIL FAIL FAIL
          ansible.builtin.fail:
            msg: "FAIL FAIL FAIL"

        - name: Write hotstack cloud-secret.yaml
          no_log: true
          vars:
            application_credential: "{{ _app_credential_out.stdout | from_json }}"
          become: true
          ansible.builtin.copy:
            dest: "/etc/hotstack/cloud-secrets.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              auth_url: {{ cloud_secrets[cloud_name].auth_url }}
              auth_type: v3applicationcredential
              identity_api_version: {{ cloud_secrets[cloud_name].identity_api_version }}
              region_name: {{ cloud_secrets[cloud_name].region_name }}
              application_credential_id: {{ application_credential.id }}
              application_credential_secret: {{ application_credential.secret }}
              {% if cloud_secrets[cloud_name].ca_cert_path is defined %}
              cacert: {{ cloud_secrets[cloud_name].ca_cert_path }}
              {% endif %}

    - name: Cloud secret is application credential
      when: _auth_type in ['v3applicationcredential', 'applicationcredential']
      block:
        - name: Write clouds.yaml with application credentials
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/openstack/clouds.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              clouds:
                default:
                  auth_type: v3applicationcredential
                  identity_api_version: {{ cloud_secrets[cloud_name].identity_api_version }}
                  region_name: {{ cloud_secrets[cloud_name].region_name }}
              {% if cloud_secrets[cloud_name].ca_cert_path is defined %}
                  cacert: {{ cloud_secrets[cloud_name].ca_cert_path }}
              {% endif %}
                  auth:
                    auth_url: {{ cloud_secrets[cloud_name].auth_url }}
                    application_credential_id: {{ cloud_secrets[cloud_name].application_credential_id }}
                    application_credential_secret: {{ cloud_secrets[cloud_name].application_credential_secret }}

        - name: Write hotstack cloud-secret.yaml
          no_log: true
          become: true
          ansible.builtin.copy:
            dest: "/etc/hotstack/cloud-secrets.yaml"
            owner: root
            group: "{{ ansible_user }}"
            mode: "0640"
            content: |
              ---
              auth_url: {{ cloud_secrets[cloud_name].auth_url }}
              auth_type: v3applicationcredential
              identity_api_version: {{ cloud_secrets[cloud_name].identity_api_version }}
              region_name: {{ cloud_secrets[cloud_name].region_name }}
              application_credential_id: {{ cloud_secrets[cloud_name].application_credential_id }}
              application_credential_secret: {{ cloud_secrets[cloud_name].application_credential_secret }}
              {% if cloud_secrets[cloud_name].ca_cert_path is defined %}
              cacert: {{ cloud_secrets[cloud_name].ca_cert_path }}
              {% endif %}
