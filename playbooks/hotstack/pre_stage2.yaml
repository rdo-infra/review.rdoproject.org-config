---
- name: Create hotstack scenario
  hosts: hotstack
  vars:
    hotstack_work_dir: "{{ ansible_user_dir }}/hotstack"
  tasks:
    - name: Assert scenario is defined
      ansible.builtin.assert:
        that:
          - scenario is defined
          - scenario | length > 0

    - name: Fetch bootstrap vars from remote to zuul executor
      no_log: true
      ansible.builtin.fetch:
        src: "{{ scenario_dir }}/{{ scenario }}/bootstrap_vars.yml"
        dest: "{{ zuul.executor.work_root }}/bootstrap_vars.yml"
        flat: true

    - name: Load bootstrap vars with template resolution
      no_log: true
      ansible.builtin.include_vars:
        file: "{{ zuul.executor.work_root }}/bootstrap_vars.yml"
        name: bootstrap_vars

    - name: Fetch automation vars from remote to zuul executor
      no_log: true
      ansible.builtin.fetch:
        src: "{{ bootstrap_vars.automation_vars_file }}"
        dest: "{{ zuul.executor.work_root }}/{{ bootstrap_vars.automation_vars_file | basename }}"
        flat: true

    - name: Load automation vars with template resolution
      no_log: true
      ansible.builtin.include_vars:
        file: "{{ zuul.executor.work_root }}/{{ bootstrap_vars.automation_vars_file | basename }}"
        name: automation_vars

    - name: Slurp zuul-build-sshkey from file
      no_log: true
      ansible.builtin.slurp:
        src: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
      register: _zuul_build_ssh_key

    - name: Set up infrastructure (Heat stack)
      no_log: true
      vars:
        os_cloud: default
        stack_name: "hs-{{ zuul.build }}"
        controller_ssh_pub_key: >-
          {{
            _zuul_build_ssh_key.content
            | ansible.builtin.b64decode
            | trim
          }}
        stack_template_path: >-
          {{
            hotstack_overrides.stack_template_path
            | default(bootstrap_vars.stack_template_path)
          }}
        stack_parameters: >-
          {{
            hotstack_overrides.stack_parameters
            | default(cloud_stack_params[cloud_name])
            | combine({
                'controller_ssh_pub_key': controller_ssh_pub_key
            })
          }}
      ansible.builtin.include_role:
        name: heat_stack

    - name: Fetch stack outputs from remote to zuul executor
      no_log: true
      ansible.builtin.fetch:
        src: "{{ hotstack_work_dir }}/hs-{{ zuul.build }}-outputs.yaml"
        dest: "{{ zuul.executor.work_root }}/hs-{{ zuul.build }}-outputs.yaml"
        flat: true

    - name: Load stack output vars with template resolution
      no_log: true
      ansible.builtin.include_vars:
        file: "{{ zuul.executor.work_root }}/hs-{{ zuul.build }}-outputs.yaml"
        name: stack_outputs

    - name: Fetch cloud secrets from remote to zuul executor
      no_log: true
      ansible.builtin.fetch:
        src: "/etc/hotstack/cloud-secrets.yaml"
        dest: "{{ zuul.executor.work_root }}/cloud-secrets.yaml"
        flat: true

    - name: Load hotstack cloud secret vars with template resolution
      no_log: true
      ansible.builtin.include_vars:
        file: "{{ zuul.executor.work_root }}/cloud-secrets.yaml"
        name: _hotstack_cloud_secrets

    - name: Add Hotstack controller-0 to ansible inventory
      no_log: true
      ansible.builtin.add_host: "{{ stack_outputs.controller_ansible_host }}"

    - name: Wait for Hotstack controller-0 to be ready
      no_log: true
      delegate_to: "{{ stack_outputs.controller_ansible_host.name }}"
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 300

    - name: Start Zuul console on Hotstack controller-0
      no_log: true
      ansible.builtin.include_role:
        name: start-zuul-console
        apply:
          delegate_to: controller-0

    - name: Prepare the controller node
      vars:
        controller_ansible_host: "{{ stack_outputs.controller_ansible_host }}"
        hotstack_cloud_secrets: "{{ _hotstack_cloud_secrets }}"
      no_log: true
      ansible.builtin.include_role:
        name: controller

    - name: Install Openshift
      vars:
        install_config: "{{ stack_outputs.ocp_install_config }}"
        agent_config: "{{ stack_outputs.ocp_agent_config }}"
        pull_secret: >-
          {{
            crc_secret_pabrodri.openshift_pull_secret
            | trim
            | ansible.builtin.b64encode
          }}
        openshift_version: >-
          {{
            hotstack_overrides.openshift_version
            | default(bootstrap_vars.openshift_version)
          }}
        ovn_k8s_gateway_config_host_routing: >-
          {{
            hotstack_overrides.ovn_k8s_gateway_config_host_routing
            | default(bootstrap_vars.ovn_k8s_gateway_config_host_routing)
          }}
        enable_iscsi: >-
          {{
            hotstack_overrides.enable_iscsi
            | default(bootstrap_vars.enable_iscsi)
          }}
        enable_multipath: >-
         {{
           hotstack_overrides.enable_multipath
           | default(bootstrap_vars.enable_multipath)
         }}
        cinder_volume_pvs: >-
          {{
            hotstack_overrides.cinder_volume_pvs
            | default(bootstrap_vars.cinder_volume_pvs)
          }}
      no_log: true
      ansible.builtin.include_role:
        name: ocp_agent_installer
        apply:
          delegate_to: controller-0

    - name: Set up RedFish Virtual bmc
      no_log: true
      vars:
        instances_uuids: "{{ stack_outputs.sushy_emulator_uuids.values() }}"
        ingress_domain: "apps.{{ stack_outputs.ocp_install_config.metadata.name }}.{{ stack_outputs.ocp_install_config.baseDomain }}"
      when:
        - stack_outputs.sushy_emulator_uuids | default({}) | length > 0
      ansible.builtin.include_role:
        name: redfish_virtual_bmc

    - name: Remove the cloud-secrets.yaml file from zuul executor
      no_log: true
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      delegate_to: localhost
      loop:
        - "{{ zuul.executor.work_root }}/cloud-secrets.yaml"

    - name: Remove the cloud-secret files
      no_log: true
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/hotstack/cloud-secrets.yaml
        - /etc/openstack/clouds.yaml