---
- name: Update hotstack controller image
  hosts: hotstack
  tasks:
    - name: Install packages (dependencies)
      become: true
      ansible.builtin.dnf:
        name:
          - make
          - qemu-img
          - guestfs-tools

    - name: Set hotstack images dir fact
      ansible.builtin.set_fact:
        hotstack_images_dir: >-
          {{
            [
              zuul.executor.work_root,
              zuul.projects['github.com/openstack-k8s-operators/hotstack'].src_dir,
              'images'
            ] | ansible.builtin.path_join
          }}

    - name: Build the hotstack-controller image
      ansible.builtin.command:
        cmd: make controller
      args:
        chdir: "{{ hotstack_images_dir }}"
        creates: "{{ hotstack_images_dir }}/controller.qcow2"

    - name: Set image name fact
      ansible.builtin.set_fact:
        image_name: hotstack-controller-{{ zuul.build[:8] }}

    - name: Get current hotstack-controller images
      no_log: true
      openstack.cloud.image_info:
        cloud: default
        filters:
          name: hotstack-controller
      register: _old_hotstack_controller_images

    - name: Upload image to glance
      no_log: true
      openstack.cloud.image:
        cloud: default
        name: "{{ image_name }}"
        container_format: bare
        disk_format: qcow2
        state: present
        filename: "{{ hotstack_images_dir }}/controller.qcow2"
        tags:
          - hotstack
          - hotstack-controller-image
      register: _new_hotstack_controller_image

    - name: Add archived suffix to old images
      no_log: true
      openstack.cloud.image:
        cloud: default
        id: "{{ item.id }}"
        name: "{{ item.name }}-archived"
        tags:
          - hotstack
          - hotstack-controller-image
          - hotstack-archived
      loop: "{{ _old_hotstack_controller_images.images }}"

    - name: Rename new image
      no_log: true
      openstack.cloud.image:
        cloud: default
        id: "{{ _new_hotstack_controller_image.image.id }}"
        name: "hotstack-controller"

    - name: Clean up archived images
      block:
        - name: Delete archived images if possible
          no_log: true
          openstack.cloud.image:
            cloud: default
            id: "{{ item.id }}"
            name: "{{ item.name }}"
            state: absent
          loop: "{{ _old_hotstack_controller_images.images }}"
          register: _delete_archived_images_results
      rescue:
        - name: DEBUG - Archived images delete
          ansible.builtin.fail:
            msg: |
              Not all arhicved images where deleted.

              Archived images: {{ _archived_images }}

              Delete results:

              {{ _delete_archived_images_results }}
