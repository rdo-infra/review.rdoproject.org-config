---
- name: Create hotstack scenario
  hosts: hotstack
  vars:
    hotstack_work_dir: "{{ ansible_user_dir }}/hotstack"
  tasks:
    - name: Assert scenario is defined
      ansible.builtin.assert:
        that:
          - scenario is defined
          - scenario | length > 0

    - name: Create SSH keypair if it doesn't exist
      no_log: true
      community.crypto.openssh_keypair:
        path: "{{ ansible_user_dir }}/.ssh/id_rsa"
        type: rsa
        size: 4096
        state: present
        force: false
      register: _ssh_keypair_result

    - name: Set controller_ssh_pub_key fact
      no_log: true
      ansible.builtin.set_fact:
        controller_ssh_pub_key: "{{ _ssh_keypair_result.public_key }}"

    - name: Load bootstrap vars
      no_log: true
      ansible.builtin.include_vars:
        file: "{{ scenario_dir }}/{{ scenario }}/bootstrap_vars.yml"
        name: bootstrap_vars

    - name: Set up infrastucture (Heat stack)
      no_log: true
      ansible.builtin.include_role:
        name: heat_stack
      vars:
        os_cloud: default
        stack_name: "hs-{{ zuul.build }}"
        stack_template_path: >-
          {{
            hotstack_overrides.stack_template_path
            | default(bootstrap_vars.stack_template_path)
          }}
        stack_parameters: >-
          {{
            hotstack_overrides.stack_parameters
            | default(cloud_stack_params[cloud_name])
            | combine({'controller_ssh_pub_key': controller_ssh_pub_key})
          }}

    - name: Load stack output vars from file
      no_log: true
      ansible.builtin.include_vars:
        file: "{{ hotstack_work_dir }}/hs-{{ zuul.build }}-outputs.yaml"
        name: stack_outputs

    - name: Load hotstack cloud secret vars from file
      no_log: true
      ansible.builtin.include_vars:
        file: "/etc/hotstack/cloud-secrets.yaml"
        name: hotstack_cloud_secrets

    - name: Prepare the controller node
      no_log: true
      ansible.builtin.include_role:
        name: controller
      vars:
        controller_ansible_host: "{{ stack_outputs.controller_ansible_host }}"

    - name: Install Openshift
      no_log: true
      ansible.builtin.include_role:
        name: ocp_agent_installer
        apply:
          delegate_to: controller-0
      vars:
        install_config: "{{ stack_outputs.ocp_install_config }}"
        agent_config: "{{ stack_outputs.ocp_agent_config }}"
        pull_secret: >-
          {{
            crc_secret_pabrodri.openshift_pull_secret
            | trim
            | ansible.builtin.b64encode
          }}
        openshift_version: >-
          {{
            hotstack_overrides.openshift_version
            | default(bootstrap_vars.openshift_version)
          }}
        ovn_k8s_gateway_config_host_routing: >-
          {{
            hotstack_overrides.ovn_k8s_gateway_config_host_routing
            | default(bootstrap_vars.ovn_k8s_gateway_config_host_routing)
          }}
        enable_iscsi: >-
          {{
            hotstack_overrides.enable_iscsi
            | default(bootstrap_vars.enable_iscsi)
          }}
        enable_multipath: >-
         {{
           hotstack_overrides.enable_multipath
           | default(bootstrap_vars.enable_multipath)
         }}
        cinder_volume_pvs: >-
          {{
            hotstack_overrides.cinder_volume_pvs
            | default(bootstrap_vars.cinder_volume_pvs)
          }}

    - name: Set up RedFish Virtual bmc
      when:
        - stack_outputs.sushy_emulator_uuids | default({}) | length > 0
      ansible.builtin.include_role:
        name: redfish_virtual_bmc
      vars:
        instances_uuids: "{{ stack_outputs.sushy_emulator_uuids.values() }}"
        ingress_domain: "apps.{{ stack_outputs.ocp_install_config.metadata.name }}.{{ stack_outputs.ocp_install_config.baseDomain }}"

    - name: Load automation vars
      ansible.builtin.include_vars:
        file: >-
          {{
            hotstack_overrides.automation_vars_file
            | default(bootstrap_vars.automation_vars_file)
          }}
        name: automation_vars

    - name: Deploy RHOSO
      ansible.builtin.include_role:
        name: hotloop
        apply:
          delegate_to: controller-0
      vars:
        work_dir: "{{ scenario_dir }}/{{ scenario }}"
        automation: "{{ automation_vars }}"
        openstack_operators_image: >-
          {{
            hotstack_overrides.openstack_operators_image
            | default(bootstrap_vars.openstack_operators_image)
          }}
        openstack_operator_channel: >-
          {{
            hotstack_overrides.openstack_operator_channel
            | default(bootstrap_vars.openstack_operator_channel)
          }}
