---
- hosts: controller
  vars:
    cloud_name: ovb-test
    bootstrap_ci_cloud_yml_secret_path: "{{ ansible_user_dir }}/.config/openstack/clouds.yaml"
  tasks:

    # NOTE: Consider install openstackclien in virtualenv
    - name: Install required packages
      become: true
      ansible.builtin.pip:
        name: python-openstackclient

    - name: Create openstack config dir
      file:
        path: "{{ ansible_user_dir }}/.config/openstack/"
        state: directory

    - name: Create the crc based CI environment
      environment:
        OS_CLOUD: "{{ cloud_name }}"
      block:
        - name: Generate clouds config from cloud_secrets secret
          template:
            src: crc.clouds.yaml.j2
            dest: "{{ bootstrap_ci_cloud_yml_secret_path }}"
            mode: 0600

        - name: Set fact for new network
          set_fact:
            crc_ci_bootstrap_private_net: "zuul-ci-net-{{ zuul.build[:8] }}"
            crc_ci_bootstrap_subnet: "zuul-ci-subnet-{{ zuul.build[:8] }}"
            crc_ci_bootstrap_ipv4_net: "{{ crc_ci_bootstrap_ipv4_range | default('192.168.0.0/24') }}"

        - name: Create new network
          ansible.builtin.command:
            cmd: >-
              openstack network create
              {% if crc_ci_bootstrap_net_mtu is defined -%}
              --mtu {{ crc_ci_bootstrap_net_mtu }}
              {% endif -%}
              --disable-port-security
              {{ crc_ci_bootstrap_private_net }}

        - name: Create subnet - ipv4
          ansible.builtin.command:
            cmd: >-
              openstack subnet create
              --network {{ crc_ci_bootstrap_private_net }}
              --subnet-range {{ crc_ci_bootstrap_ipv4_net }}
              {% if crc_ci_no_dhcp | default(false) -%}
              --no-dhcp
              {% endif -%}
              {{ crc_ci_bootstrap_subnet }}

        # Even if the variable isn't set, it won't fail, but display a generic
        # debug message like "UNDEFINED VAR" and continue
        - name: Debug parameters
          ansible.builtin.debug:
            var: crc_ci_bootstrap_node_ips

        - name: Debug commands
          vars:
            node_id: "{{ hostvars[item]['nodepool']['external_id'] }}"
            node_ip: >-
              {{
                  crc_ci_bootstrap_node_ips[item]
                  if (item in (crc_ci_bootstrap_node_ips | default({})))
                  else ""
              }}
          ansible.builtin.debug:
            msg: >-
              openstack port create
              --network {{ crc_ci_bootstrap_private_net }}
              {% if node_ip != "" -%}
              --fixed-ip subnet={{ crc_ci_bootstrap_subnet }},ip-address={{ node_ip }}
              {% endif -%}
              {{ item }}-{{ node_id }};

              openstack server add port {{ node_id }} {{ item }}-{{ node_id }}
          loop: "{{ hostvars.keys() }}"
          loop_control:
            label: "debug-{{ item }}"

        - name: Attach network to each node
          vars:
            node_id: "{{ hostvars[item]['nodepool']['external_id'] }}"
            node_ip: >-
              {{
                  crc_ci_bootstrap_node_ips[item]
                  if (item in (crc_ci_bootstrap_node_ips | default({})))
                  else ""
              }}
          ansible.builtin.shell:
            cmd: >-
              openstack port create
              --network {{ crc_ci_bootstrap_private_net }}
              {% if node_ip != "" -%}
              --fixed-ip subnet={{ crc_ci_bootstrap_subnet }},ip-address={{ node_ip }}
              {% endif -%}
              {{ item }}-{{ node_id }};

              sleep 1;

              openstack server add port {{ node_id }} {{ item }}-{{ node_id }}
          loop: "{{ hostvars.keys() }}"
          loop_control:
            label: "{{ item }}"

        - name: Display some data about network and subnet
          ansible.builtin.shell:
            cmd: |
              openstack network show {{ crc_ci_bootstrap_private_net }};
              openstack subnet show  {{ crc_ci_bootstrap_subnet }};

        - name: Display server configuration
          vars:
            node_id: "{{ hostvars[item]['nodepool']['external_id'] }}"
          ansible.builtin.command:
            cmd: openstack server show {{ node_id }}
          loop: "{{ hostvars.keys() }}"

        - name: Extract MAC address for CRC private port
          block:
            - name: Get port description
              register: extracted_port_value
              ansible.builtin.command:
                cmd: "openstack port show crc-{{ hostvars['crc']['nodepool']['external_id'] }} -f value -c mac_address"
            - name: Extract port MAC
              ansible.builtin.set_fact:
                cacheable: true
                crc_ci_bootstrap_port_mac: "{{ extracted_port_value['stdout'] | trim }}"

      always:
        - name: Remove clouds.yml secret
          file:
            path: "{{ bootstrap_ci_cloud_yml_secret_path }}"
            state: absent

- hosts: all
  gather_facts: false
  tasks:
    - name: Get fixed IP if any
      ansible.builtin.set_fact:
        node_ip: >-
          {{
              crc_ci_bootstrap_node_ips[inventory_hostname]
              if (inventory_hostname in (crc_ci_bootstrap_node_ips | default({})))
              else ""
          }}

    - name: Set fixed IP if needed
      when:
        - node_ip != ''
      vars:
        crc_ci_bootstrap_ipv4_net: "{{ crc_ci_bootstrap_ipv4_range | default('192.168.0.0/24') }}"
        gw_host: "{{ crc_ci_bootstrap_ipv4_net.split('/')[0] | regex_replace('0$', '1') }}"
        net_netmask: "{{ crc_ci_bootstrap_ipv4_net.split('/')[1] }}"
      block:
        - name: Get connection name
          register: connection_name
          ansible.builtin.command:
            cmd: nmcli -g NAME,STATE con show | awk -F ':' '($2 ~ /^0?$/ && /Wired/){print $1}'

        - name: Debug nmcli command
          ansible.builtin.debug:
            msg: >-
              nmcli con mod "{{ connection_name.stdout | trim }}"
              ipv4.address {{ node_ip }}/{{ net_netmask }}
              ipv4.gateway {{ gw_host }}
              ipv4.method manual

        - name: Configure fixed IP in nmcli
          when:
            - connection_name.stdout != ''
          become: true
          ansible.builtin.command:
            cmd: >-
              nmcli con mod "{{ connection_name.stdout | trim }}"
              ipv4.address {{ node_ip }}/{{ net_netmask }}
              ipv4.gateway {{ gw_host }}
              ipv4.method manual

- hosts: crc
  tasks:
    - name: Reboot host after attaching network interface
      become: true
      ansible.builtin.reboot:

    - include_role:
        name: start-zuul-console
