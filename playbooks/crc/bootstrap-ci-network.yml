---
- hosts: controller
  vars:
    cloud_name: ovb-test
    bootstrap_ci_cloud_yml_secret_path: "{{ ansible_user_dir }}/.config/openstack/clouds.yaml"
  tasks:

    # NOTE: Consider install openstackclien in virtualenv
    - name: Install required packages
      become: true
      ansible.builtin.pip:
        name: python-openstackclient

    - name: Create openstack config dir
      file:
        path: "{{ ansible_user_dir }}/.config/openstack/"
        state: directory

    - name: Create the crc based CI environment
      environment:
        OS_CLOUD: "{{ cloud_name }}"
      block:
        - name: Generate clouds config from cloud_secrets secret
          template:
            src: crc.clouds.yaml.j2
            dest: "{{ bootstrap_ci_cloud_yml_secret_path }}"
            mode: 0600

        - name: Set fact for new network
          set_fact:
            crc_ci_bootstrap_private_net: "zuul-ci-net-{{ zuul.build[:8] }}"
            crc_ci_bootstrap_subnet: "zuul-ci-subnet-{{ zuul.build[:8] }}"
            crc_ci_bootstrap_ipv4_net: "{{ crc_ci_bootstrap_ipv4_range | default('192.168.0.0/24') }}"

        - name: Create new network
          ansible.builtin.command:
            cmd: >-
              openstack network create
              {% if crc_ci_bootstrap_net_mtu is defined -%}
              --mtu {{ crc_ci_bootstrap_net_mtu }}
              {% endif -%}
              --disable-port-security
              {{ crc_ci_bootstrap_private_net }}

        - name: Create subnet - ipv4
          ansible.builtin.command:
            cmd: >-
              openstack subnet create
              --network {{ crc_ci_bootstrap_private_net }}
              --subnet-range {{ crc_ci_bootstrap_ipv4_net }}
              {% if crc_ci_no_dhcp | default(false) -%}
              --no-dhcp
              {% endif -%}
              {{ crc_ci_bootstrap_subnet }}

        # Even if the variable isn't set, it won't fail, but display a generic
        # debug message like "UNDEFINED VAR" and continue
        - name: Debug parameters
          ansible.builtin.debug:
            var: crc_ci_bootstrap_node_ips

        - name: Create port and configure it on the host
          vars:
            node_ip: >-
              {{
                  crc_ci_bootstrap_node_ips[item]
                  if (item in (crc_ci_bootstrap_node_ips | default({})))
                  else ""
              }}
          when: node_ip != ''
          ansible.builtin.include_tasks: network_configuration.yml
          loop: "{{ hostvars.keys() }}"
          loop_control:
            label: "{{ item }}"

        - name: Display server configuration
          vars:
            node_id: "{{ hostvars[item]['nodepool']['external_id'] }}"
          ansible.builtin.command:
            cmd: openstack server show {{ node_id }}
          loop: "{{ hostvars.keys() }}"

- hosts: crc
  tasks:
    - name: Reboot host after attaching network interface
      become: true
      ansible.builtin.reboot:

    - include_role:
        name: start-zuul-console
