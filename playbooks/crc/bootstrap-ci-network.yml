---
- hosts: controller
  vars:
    cloud_name: ovb-test
    bootstrap_ci_cloud_yml_secret_path: "{{ ansible_user_dir }}/.config/openstack/clouds.yaml"
  tasks:

    # NOTE: Consider install openstackclien in virtualenv
    - name: Install required packages
      become: true
      ansible.builtin.pip:
        name: python-openstackclient

    - name: Create openstack config dir
      file:
        path: "{{ ansible_user_dir }}/.config/openstack/"
        state: directory

    - name: Create the crc based CI environment
      environment:
        OS_CLOUD: "{{ cloud_name }}"
      block:
        - name: Assert that every host has a given Fixed IP for the internal net
          ansible.builtin.assert:
            that:
              - crc_ci_bootstrap_node_ips is defined
              - hostvars.keys() == crc_ci_bootstrap_node_ips.keys()
            msg: "Fixed IP for every instance should be provided"

        - name: Generate clouds config from cloud_secrets secret
          template:
            src: crc.clouds.yaml.j2
            dest: "{{ bootstrap_ci_cloud_yml_secret_path }}"
            mode: 0600

        - name: Set fact for new network
          set_fact:
            crc_ci_bootstrap_private_net: "zuul-ci-net-{{ zuul.build[:8] }}"
            crc_ci_bootstrap_subnet: "zuul-ci-subnet-{{ zuul.build[:8] }}"
            crc_ci_bootstrap_ipv4_net: "{{ crc_ci_bootstrap_ipv4_range | default('192.168.0.0/24') }}"
            crc_ci_bootstrap_router_name: "zuul-ci-subnet-router-{{ zuul.build[:8] }}"

        - name: Create new network
          ansible.builtin.command:
            cmd: >-
              openstack network create
              {% if crc_ci_bootstrap_net_mtu is defined -%}
              --mtu {{ crc_ci_bootstrap_net_mtu }}
              {% endif -%}
              --disable-port-security
              {{ crc_ci_bootstrap_private_net }}

        - name: Create subnet - ipv4
          ansible.builtin.command:
            cmd: >-
              openstack subnet create
              --network {{ crc_ci_bootstrap_private_net }}
              --subnet-range {{ crc_ci_bootstrap_ipv4_net }}
              --no-dhcp
              {{ crc_ci_bootstrap_subnet }}

        - name: Create router and gateway
          when:
            - crc_ci_bootstrap_public_gw | default(true) |bool
          block:
            - name: Create router
              ansible.builtin.command:
                cmd: >-
                  openstack router create
                  --external-gateway {{ crc_ci_bootstrap_public_gw_net | default('public') }}
                  {{ crc_ci_bootstrap_router_name }}
            - name: Add router to subnet
              ansible.builtin.command:
                cmd: >-
                  openstack router add subnet
                  {{ crc_ci_bootstrap_router_name }} {{ crc_ci_bootstrap_subnet }}

        # Even if the variable isn't set, it won't fail, but display a generic
        # debug message like "UNDEFINED VAR" and continue
        - name: Debug parameters
          ansible.builtin.debug:
            var: crc_ci_bootstrap_node_ips

        - name: Create port and configure it on the host
          vars:
            node_id: "{{ hostvars[item]['nodepool']['external_id'] }}"
            node_ip: "{{ crc_ci_bootstrap_node_ips[item] }}"
          ansible.builtin.include_tasks: network_configuration.yml
          loop: "{{ hostvars.keys() }}"
          loop_control:
            label: "{{ item }}"

        - name: Display some data about network and subnet
          ansible.builtin.shell:
            cmd: |
              openstack network show {{ crc_ci_bootstrap_private_net }};
              openstack subnet show  {{ crc_ci_bootstrap_subnet }};
              openstack port list --network {{ crc_ci_bootstrap_private_net }};
              {% if crc_ci_bootstrap_public_gw | default(true) |bool -%}
              openstack router show {{ crc_ci_bootstrap_router_name }};
              {% endif -%}

        - name: Display server configuration
          vars:
            node_id: "{{ hostvars[item]['nodepool']['external_id'] }}"
          ansible.builtin.command:
            cmd: openstack server show {{ node_id }}
          loop: "{{ hostvars.keys() }}"

        - name: Save MACs dict for further usage
          vars:
            content:
              crc_ci_bootstrap_private_net_macs: "{{ crc_ci_bootstrap_private_net_macs }}"
          become: true
          ansible.builtin.copy:
            dest: /etc/ci/env/private-net-macs.yml
            content: "{{ content | to_nice_yaml }}"
            owner: root
            group: root
            mode: '0644'

- hosts: crc
  tasks:
    - name: Reconfigure kubelet service
      ansible.builtin.include_tasks: reconfigure_kubelet.yaml

    - name: Reboot host after attaching network interface
      become: true
      ansible.builtin.reboot:

    - include_role:
        name: start-zuul-console
