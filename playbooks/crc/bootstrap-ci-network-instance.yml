---
- name: Create instance ports and attach if necessary
  ansible.builtin.include_tasks: bootstrap-ci-network-instance-create-attch-port.yml

- name: Apply Network Manager changes in the target instance
  delegate_to: "{{ instance_item.key }}"
  block:
    - name: Create NetworkManager configuration file for the trunk port
      vars:
        iface_info: "{{ item.value }}"
      ansible.builtin.template:
        src: >-
          {{
            'bootstrap-ci-network-vlan-nm-connection.nmconnection.j2'
            if (iface_vlan_id != '' else 'bootstrap-ci-network-nm-connection.nmconnection')
          }}
        dest: "/etc/NetworkManager/system-connections/{{ item.value.connection }}.nmconnection"
        mode: '0600'
        owner: root
        group: root
      loop: "{{ crc_ci_bootstrap_networks_out[instance_item.key] | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Refresh NetworkManager
      become: true
      ansible.builtin.systemd:
        name: NetworkManager
        state: restarted

    - name: Get the default iface connection
      when: instance_item.key is regex('^compute.*')
      register: crc_ci_bootstrap_host_default_connection
      ansible.builtin.command:
        cmd: "nmcli -g general.connection device show eth0"

    - name: Disable the defaul route of the public facing iface in computes
      become: true
      when: instance_item.key is regex('^compute.*')
      ansible.builtin.shell:
        cmd: >-
          nmcli connection modify '{{ crc_ci_bootstrap_host_default_connection.stdout }}' ipv4.never-default yes &&
          nmcli connection up '{{ crc_ci_bootstrap_host_default_connection.stdout }}'
