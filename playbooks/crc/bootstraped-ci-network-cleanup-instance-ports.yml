---
- name: Fetch port info
  vars:
    port_name: "{{ hostvar_item_key }}-{{ instance_id }}"
  ansible.builtin.command:
    cmd: "openstack port show {{ port_name }} -f yaml"
  register: crc_ci_bootstrap_cleanup_port_info_out
  failed_when: >-
    crc_ci_bootstrap_cleanup_port_info_out.rc != 0 and
    (not 'no port found' in crc_ci_bootstrap_cleanup_port_info_out.stderr | lower)
  changed_when: crc_ci_bootstrap_cleanup_port_info_out.rc == 0

- name: Set port info yaml for further usage
  when: crc_ci_bootstrap_cleanup_port_info_out.rc == 0
  ansible.builtin.set_fact:
    crc_ci_bootstrap_cleanup_port_info_yaml: "{{ crc_ci_bootstrap_cleanup_port_info_out.stdout | from_yaml }}"
    cacheable: true

- name: Cleanup subports and trunk
  when: crc_ci_bootstrap_cleanup_port_info_out.rc == 0
  block:
    - name: Detach port
      ansible.builtin.command:
        cmd: "openstack server remove port {{ instance_id }} {{ crc_ci_bootstrap_cleanup_port_info_yaml.id }}"
      ignore_errors: true

    - name: Delete the ports and trunk if available
      when: "'trunk_id' in crc_ci_bootstrap_cleanup_port_info_yaml.trunk_details | default({})"
      block:
        - name: Delete port association with trunk network
          ansible.builtin.shell: >
            for trunk_port in $(openstack network trunk show
            "{{ crc_ci_bootstrap_cleanup_port_info_yaml.trunk_details['trunk_id'] }}"
            -c sub_ports -f value | grep -o "'port_id': '[^']*'" | awk -F"'" '{print $4}');
            do openstack network trunk unset "{{ crc_ci_bootstrap_cleanup_port_info_yaml.trunk_details['trunk_id'] }}" --subport "$trunk_port"
          register: crc_ci_bootstrap_unassign_trunk_port
          failed_when: >-
            crc_ci_bootstrap_unassign_trunk_port.rc != 0 and
            (not "object has no attribute 'id'" in crc_ci_bootstrap_unassign_trunk_port.stderr | lower)
          changed_when: crc_ci_bootstrap_unassign_trunk_port.rc == 0

        - name: Delete trunk sub ports (tagged ones)
          register: crc_ci_bootstrap_cleanup_child_port_delete_out
          ansible.builtin.command:
            cmd: "openstack port delete {{ subport_item.port_id }}"
          failed_when: >-
            crc_ci_bootstrap_cleanup_child_port_delete_out.rc != 0 and
            (not 'no port found' in crc_ci_bootstrap_cleanup_child_port_delete_out.stderr | lower)
          changed_when: crc_ci_bootstrap_cleanup_child_port_delete_out.rc == 0
          loop: "{{ crc_ci_bootstrap_cleanup_port_info_yaml.sub_ports | default([]) }}"
          loop_control:
            label: "{{ subport_item }}"
            loop_var: subport_item

        - name: Delete the trunk network itself
          ansible.builtin.command:
            cmd: "openstack network trunk delete {{ crc_ci_bootstrap_cleanup_port_info_yaml.trunk_details['trunk_id'] }}"
          register: crc_ci_bootstrap_cleanup_trunk_delete_out
          failed_when: >-
            crc_ci_bootstrap_cleanup_trunk_delete_out.rc != 0 and
            (not "object has no attribute 'id'" in crc_ci_bootstrap_cleanup_trunk_delete_out.stderr | lower)
          changed_when: crc_ci_bootstrap_cleanup_trunk_delete_out.rc == 0

- name: Remove the parent/trunk port itself
  when: crc_ci_bootstrap_cleanup_port_info_out.rc == 0
  ansible.builtin.command:
    cmd: "openstack port delete {{ crc_ci_bootstrap_cleanup_port_info_yaml.id }}"
  register: crc_ci_bootstrap_cleanup_parent_port_delete_out
  failed_when: >-
    crc_ci_bootstrap_cleanup_parent_port_delete_out.rc != 0 and
    (not 'no port found' in crc_ci_bootstrap_cleanup_parent_port_delete_out.stderr | lower)
  changed_when: crc_ci_bootstrap_cleanup_parent_port_delete_out.rc == 0
