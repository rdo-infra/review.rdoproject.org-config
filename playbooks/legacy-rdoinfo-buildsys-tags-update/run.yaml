- hosts: all
  name: Autoconverted job legacy-rdoinfo-buildsys-tags-update-pike-testing from old
    job rdoinfo-buildsys-tags-update-pike-testing
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - name: clone
      shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://opendev.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

          if [[ "${ZUUL_PIPELINE}" =~ "periodic" ]]; then
          # Note (trown): we need to make sure we clone this to the same
          # location as zuul-cloner will so that manual and periodic jobs
          # can share builders
              git clone --depth=1 $GIT_SOURCE/$ZUUL_PROJECT $ZUUL_PROJECT
          else
              /usr/zuul-env/bin/zuul-cloner -v $GIT_SOURCE $ZUUL_PROJECT
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true

    - name: legacy-rdoinfo-buildsys-tags-update
      shell:
        cmd: |
          set +e -x
          PHASE={{ rdoinfo_phase }}
          # I want to run jobs for testing in odd days and release in even
          DAY=$(date +%-d)
          if [ $(($DAY%2)) -eq 0 -a $PHASE == "testing" ]||[ $(($DAY%2)) -ne 0 -a $PHASE == "release" ]; then
            exit 0
          fi
          # When updating packages from -testing to -release we want to automatically include
          # dependencies. For promotions from -candidate to -testing we will keep it manual as
          # someone must create the build and justify the update.
          case $PHASE in
            testing )
              DEPS="-n"
            ;;
            release )
              DEPS=""
            ;;
          esac
          sudo yum install -y git centos-packager PyYAML
          virtualenv --system-site-packages .venv
          . .venv/bin/activate
          pushd {{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/graffiti'].src_dir }}
          pip install .
          popd
          pip install 'ruamel.yaml<=0.15.0' sh git-review
          # Install releng, needed for update_uc command
          pushd {{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/rdo-infra/releng'].src_dir }}
          pip install .
          popd

          mkdir -p ~/.ssh
          cat >> ~/.ssh/config << EOF

          Host review.rdoproject.org
            IdentityFile ~/.ssh/rdoinfo_id_rsa
          EOF
          ssh-keyscan -p 29418 review.rdoproject.org >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          cd $WORKSPACE/rdoinfo
          for RELEASE in {{ stable_releases }} ; do
            # If release has format <openstack_release>,<centos_release> get centos release.
            CENTOS_V=$(echo $RELEASE|awk -F',' '{print $2}')
            # if not defaults to 7
            CENTOS_V=${CENTOS_V:-7}
            git reset --hard origin/master
            python {{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/gating_scripts'].src_dir }}/buildsys-tags/update-buildsys-tags.py \
              -c {{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/gating_scripts'].src_dir }}/buildsys-tags/graffiti_config.yaml \
              -r $RELEASE \
              -p $PHASE \
              --centos-release $CENTOS_V \
              $DEPS
            DIFF=$(git diff *.yml */*.yml)
            if [ -n "$DIFF" ]; then
              # Check for an open change, if so reuse it
              change_info=$(ssh -p 29418 rdo-trunk@review.rdoproject.org \
              gerrit query --current-patch-set status:open project:rdoinfo owner:rdo-trunk branch:master \
                  topic:"$RELEASE"-"$PHASE"-update)
              previous=$(echo "$change_info" | grep "^  number:" | awk '{print $2}')
              if [ -n "$previous" ]; then
                  CHANGE_ID=$(echo "$change_info" | grep "^change" | awk '{print $2}')
                  COMMIT_MSG="Promote CBS tags update for $RELEASE-$PHASE\n\nChange-Id: $CHANGE_ID\n"
              else
                  COMMIT_MSG="Promote CBS tags update for $RELEASE-$PHASE"
              fi
              git config user.name "rdo-trunk"
              git config user.email "javier.pena@redhat.com"
              git config gitreview.username "rdo-trunk"
              git checkout -b proposal
              git review -s -v
              echo -e $COMMIT_MSG | git commit -F- *.yml */*.yml
              # Just in case, check if there are changes between this version and the current review
              DIFF_RDO=0
              for i in $(ls *yml */*yml 2>/dev/null); do
                  curl https://review.rdoproject.org/r/changes/rdoinfo~master~$CHANGE_ID/revisions/current/files/$i/content |base64 -d > $i.current
                  diff $i $i.current
                  if [ $? -ne 0 ]; then
                      DIFF_RDO=1
                  fi
              done
              if [ $DIFF_RDO -ne 0 ]; then
                  git review -t "$RELEASE-$PHASE-update" < /dev/null
              fi
            fi
          done
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true
